{-# LANGUAGE NoImplicitPrelude #-}
module FOL.Optimize.Optimize (optimize) where

import FOL.Language.AlphaRn
import FOL.Language.Common
import FOL.Language.Parser
import FOL.Language.Pretty
import FOL.Language.Unique

import FOL.Optimize.Inline

import Control.Monad

optimize :: String -> String
optimize = pprint . evalUnique . transform . parse
    where
      transform = inline <=< alphaRn

example = "(begin (define (operation-2 the-closure the-formals) (argument-types (vector) (vector) (cons real real)) (let () (operation-3 (vector) (vector)))) (define (operation-4 the-closure the-formals) (argument-types (vector (vector (vector real))) (vector (vector (vector real))) (vector (vector real) (vector (vector (vector (vector real)))))) (let ((recur the-formals)) (operation-7 (vector-ref the-closure 0) (vector recur)))) (define (operation-9 the-closure the-formals) (argument-types (vector) (cons (vector real) (cons real (vector))) real) (let ((f (car the-formals)) (start (car (cdr the-formals)))) (operation-11 (vector f start) (vector)))) (define (operation-13 the-closure the-formals) (argument-types (vector) (cons real real) bool) (let ((a (car the-formals)) (b (cdr the-formals))) (let ((temp-15 (cons (abs (let ((temp-14 (cons a b))) (- (car temp-14) (cdr temp-14)))) 0.00001))) (< (car temp-15) 0.00001)))) (define (operation-16 the-closure the-formals) (argument-types (vector (vector real) (vector (vector real) (vector (vector (vector (vector real))))) real) () real) (let () (operation-19 (vector-ref the-closure 1) (cons (vector-ref the-closure 2) (operation-18 (vector-ref the-closure 0) (vector-ref the-closure 2)))))) (define (operation-20 the-closure the-formals) (argument-types (vector (vector real) (vector (vector (vector (vector real)))) real) () real) (let () (operation-22 (vector-ref the-closure 1) (cons (vector-ref the-closure 2) (operation-18 (vector-ref the-closure 0) (vector-ref the-closure 2)))))) (define (operation-18 the-closure the-formals) (argument-types (vector real) real real) (let ((guess the-formals)) (let ((temp-25 (cons (let ((temp-24 (cons guess (let ((temp-23 (cons (vector-ref the-closure 0) guess))) (/ (car temp-23) (cdr temp-23)))))) (+ (car temp-24) (cdr temp-24))) 2))) (/ (car temp-25) 2)))) (define (operation-26 the-closure the-formals) (argument-types (vector) (vector) (cons real real)) (let () (operation-27 (vector) ()))) (define (operation-7 the-closure the-formals) (argument-types (vector (vector real)) (vector (vector (vector (vector real)))) (vector (vector real) (vector (vector (vector (vector real)))))) (let ((loop the-formals)) (vector (vector-ref the-closure 0) loop))) (define (operation-22 the-closure the-formals) (argument-types (vector (vector (vector (vector real)))) (cons real real) real) (let ((y the-formals)) (operation-19 (operation-4 (vector-ref the-closure 0) (vector-ref the-closure 0)) y))) (define (operation-27 the-closure the-formals) (argument-types (vector) () (cons real real)) (let () (cons 1.4142135623730951 (operation-29 (vector) (real 2))))) (define (operation-30 the-closure the-formals) (argument-types (vector) (vector (vector real)) (vector (vector real) (vector (vector (vector (vector real)))))) (let ((kernel the-formals)) (operation-4 (vector kernel) (vector kernel)))) (define (operation-11 the-closure the-formals) (argument-types (vector (vector real) real) (vector) real) (let () (operation-32 (vector (vector-ref the-closure 0) (vector-ref the-closure 1)) (operation-30 (vector) (vector (vector-ref the-closure 0)))))) (define (operation-33 the-closure the-formals) (argument-types (vector) real (vector real)) (let ((x the-formals)) (vector x))) (define (operation-32 the-closure the-formals) (argument-types (vector (vector real) real) (vector (vector real) (vector (vector (vector (vector real))))) real) (let ((loop the-formals)) (operation-16 (vector (vector-ref the-closure 0) loop (vector-ref the-closure 1)) ()))) (define (operation-1 the-closure the-formals) (argument-types (vector) () (cons real real)) (let () (operation-34 (vector) (vector)))) (define (operation-34 the-closure the-formals) (argument-types (vector) (vector) (cons real real)) (let () (operation-2 (vector) (vector)))) (define (operation-35 the-closure the-formals) (argument-types (vector real) () real) (let () (vector-ref the-closure 0))) (define (operation-3 the-closure the-formals) (argument-types (vector) (vector) (cons real real)) (let () (operation-26 (vector) (vector)))) (define (operation-29 the-closure the-formals) (argument-types (vector) real real) (let ((x the-formals)) (operation-9 (vector) (cons (operation-33 (vector) x) (cons (real 1.0) (vector)))))) (define (operation-19 the-closure the-formals) (argument-types (vector (vector real) (vector (vector (vector (vector real))))) (cons real real) real) (let ((old (car the-formals)) (new (cdr the-formals))) (if (operation-13 (vector) (cons old new)) (operation-35 (vector new) ()) (operation-20 (vector (vector-ref the-closure 0) (vector-ref the-closure 1) new) ())))) (operation-1 (vector) ()))"