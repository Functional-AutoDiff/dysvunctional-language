(begin
 (define-type closure-605 (structure (bundle-tag gensym) (thing real)))
 (define-type
  closure-282
  (structure (g:* closure-53)
             (g:/ closure-396)
             (g:sqrt closure-298)
             (lift-real->real closure-265)))
 (define-type
  closure-123
  (structure (f closure-98)
             (forward? closure-489)
             (operate-forward closure-571)
             (operate-reverse closure-125)
             (perturbation-of closure-31)
             (reverse? closure-420)
             (thing1 real)
             (thing2 real)))
 (define-type
  closure-10
  (structure (f closure-104)
             (forward? closure-489)
             (g:* closure-101)
             (g:+ closure-102)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (primal closure-342)
             (reverse? closure-420)
             (self closure-511)
             (tangent closure-377)))
 (define-type
  closure-16
  (structure (f closure-105)
             (forward? closure-489)
             (g:* closure-101)
             (g:+ closure-102)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (primal closure-342)
             (reverse? closure-420)
             (self closure-513)
             (tangent closure-377)))
 (define-type
  closure-209
  (structure (forward? closure-489)
             (g:* closure-101)
             (g:+ closure-102)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (primal closure-342)
             (reverse? closure-420)
             (tangent closure-377)))
 (define-type closure-458 (structure (lose closure-460)))
 (define-type
  closure-53
  (structure (lift-real*real->real closure-103) (v:* closure-104)))
 (define-type
  closure-555
  (structure (f closure-105)
             (forward? closure-489)
             (operate-forward closure-557)
             (perturbation-of closure-31)
             (reverse? closure-420)
             (thing1 real)))
 (define-type closure-290 (structure (f closure-98) (thing1 real)))
 (define-type
  closure-314
  (structure (eps1 gensym)
             (eps2 gensym)
             (f closure-98)
             (forward? closure-489)
             (operate-forward closure-580)
             (operate-reverse closure-168)
             (reverse? closure-420)
             (thing1 real)))
 (define-type
  closure-22
  (structure (count real)
             (f closure-235)
             (g:- closure-205)
             (iterate closure-223)
             (x (cons real real))))
 (define-type
  closure-537
  (structure (eps1 gensym)
             (eps2 gensym)
             (f closure-98)
             (operate-reverse closure-168)
             (reverse? closure-420)
             (thing1 real)))
 (define-type
  closure-59
  (structure (f closure-98)
             (forward? closure-489)
             (g:* closure-101)
             (g:+ closure-102)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (primal closure-342)
             (reverse? closure-420)
             (self closure-463)
             (tangent closure-377)))
 (define-type closure-606 (structure (f closure-104)))
 (define-type
  closure-104
  (structure
   (kernels
    (cons closure-12
          (cons (vector) (cons closure-11 (cons (vector) (vector))))))))
 (define-type
  closure-226
  (structure (g:- closure-205) (g:<= closure-177) (iterate closure-223)))
 (define-type closure-254 (structure (y (cons real real))))
 (define-type
  closure-509
  (structure (c:* closure-96)
             (c:+ closure-424)
             (c:0 (cons real real))
             (g:< closure-180)
             (magnitude closure-355)))
 (define-type closure-607 (structure (zero gensym)))
 (define-type
  closure-101
  (structure
   (kernels
    (cons closure-12
          (cons (vector) (cons closure-11 (cons (vector) (vector))))))))
 (define-type closure-609
              (structure (eps1 gensym) (operate-reverse closure-608)))
 (define-type
  closure-549
  (structure (primal* closure-398) (tape-cell? closure-173) (thing real)))
 (define-type
  closure-31
  (structure (bundle? closure-149)
             (least-gensym gensym)
             (tape-cell? closure-173)))
 (define-type
  closure-80
  (structure (f closure-105)
             (forward? closure-489)
             (operate-forward closure-39)
             (operate-reverse closure-480)
             (perturbation-of closure-31)
             (reverse? closure-420)
             (thing1 real)
             (thing2 real)))
 (define-type
  closure-85
  (structure (f closure-104)
             (forward? closure-489)
             (operate-forward closure-45)
             (operate-reverse closure-483)
             (perturbation-of closure-31)
             (reverse? closure-420)
             (thing1 real)
             (thing2 real)))
 (define-type closure-610 (structure (g:* closure-101) (obj2 real)))
 (define-type
  closure-347
  (structure (f closure-104)
             (forward? closure-489)
             (operate-forward closure-144)
             (operate-reverse closure-429)
             (reverse? closure-420)
             (thing2 real)))
 (define-type
  closure-602
  (structure (g:* closure-53)
             (g:+ closure-49)
             (g:- closure-205)
             (g:< closure-180)
             (g:<= closure-177)
             (g:sqrt closure-282)))
 (define-type closure-296 (structure (y (cons real real))))
 (define-type
  closure-102
  (structure
   (kernels
    (cons closure-12
          (cons (vector) (cons closure-11 (cons (vector) (vector))))))))
 (define-type closure-611 (structure (eps1 gensym) (eps2 gensym)))
 (define-type
  closure-363
  (structure (g:* closure-53)
             (g:+ closure-49)
             (g:- closure-205)
             (g:sqrt closure-282)
             (lift-real*real->boolean closure-442)))
 (define-type
  closure-283
  (structure (g:* closure-53)
             (g:/ closure-396)
             (lift-real->real closure-265)))
 (define-type
  closure-49
  (structure (lift-real*real->real closure-103) (v:+ closure-105)))
 (define-type
  closure-217
  (structure
   (kernels
    (cons closure-12
          (cons (vector) (cons closure-11 (cons (vector) (vector))))))
   (z*-k closure-288)))
 (define-type
  closure-199
  (structure (bundle? closure-149)
             (forward? closure-489)
             (least-gensym gensym)
             (make-bundle closure-372)
             (make-tape-cell closure-195)
             (tape-cell-tag gensym)
             (universal-zero? closure-120)
             (zero gensym)))
 (define-type
  closure-134
  (structure (bundle? closure-149)
             (df/dx closure-493)
             (g:* closure-53)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (tape-cell? closure-173)))
 (define-type
  closure-115
  (structure (bundle? closure-149)
             (df/dx closure-493)
             (g:* closure-53)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (self closure-543)
             (tape-cell? closure-173)))
 (define-type closure-120 (structure (zero gensym)))
 (define-type closure-612 (structure (tape-cell-tag gensym) (thing real)))
 (define-type closure-613
              (structure (eps2 gensym) (operate-forward closure-580)))
 (define-type closure-232 (structure (x (cons real real))))
 (define-type closure-211
              (structure (g:+ closure-102) (universal-zero? closure-120)))
 (define-type closure-614 (structure (g:+ closure-102) (x real)))
 (define-type closure-210 (structure (g:* closure-101)))
 (define-type closure-136 (structure (g:/ closure-137)))
 (define-type closure-501 (structure (primal* closure-268)))
 (define-type
  closure-580
  (structure (g:* closure-101)
             (g:+ closure-102)
             (make-bundle closure-372)
             (primal closure-342)
             (self closure-463)
             (tangent closure-377)
             (thing1 real)))
 (define-type
  closure-103
  (structure
   (kernels
    (cons closure-12
          (cons (vector) (cons closure-11 (cons (vector) (vector))))))))
 (define-type closure-615 (structure (tape-cell-tag gensym)))
 (define-type closure-463 (structure (recur closure-464)))
 (define-type closure-616 (structure (tape-cell-tag gensym)))
 (define-type
  closure-302
  (structure (bundle? closure-149)
             (g:* closure-53)
             (g:+ closure-49)
             (lift-real*real->real closure-209)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (tape-cell? closure-173)
             (v:- closure-98)))
 (define-type
  closure-340
  (structure (bundle? closure-149)
             (forward? closure-489)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (primal closure-342)
             (reverse? closure-420)
             (tape-cell? closure-173)
             (universal-zero? closure-120)
             (zero gensym)))
 (define-type
  closure-427
  (structure (f closure-104)
             (forward? closure-489)
             (operate-forward closure-144)
             (operate-reverse closure-429)
             (perturbation-of closure-31)
             (reverse? closure-420)
             (thing2 real)))
 (define-type closure-32
              (structure (least-gensym gensym) (tape-cell? closure-173)))
 (define-type closure-35
              (structure (least-gensym gensym) (tape-cell? closure-173)))
 (define-type
  closure-288
  (structure (bundle? closure-149)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (tape-cell? closure-173)
             (zero gensym)))
 (define-type
  closure-396
  (structure (g:* closure-53)
             (g:- closure-205)
             (g:/ closure-137)
             (lift-real*real->real closure-209)
             (v:/ closure-138)))
 (define-type closure-98 (structure (g:* closure-53) (g:+ closure-49)))
 (define-type
  closure-349
  (structure (eps1 gensym)
             (eps2 gensym)
             (f closure-98)
             (forward? closure-489)
             (operate-forward closure-571)
             (operate-reverse closure-125)
             (reverse? closure-420)
             (thing1 real)
             (thing2 real)))
 (define-type
  closure-40
  (structure (f closure-105)
             (forward? closure-489)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (reverse-primal closure-42)
             (reverse? closure-420)
             (self closure-513)
             (thing1 real)
             (thing2 real)))
 (define-type
  closure-46
  (structure (f closure-104)
             (forward? closure-489)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (reverse-primal closure-42)
             (reverse? closure-420)
             (self closure-511)
             (thing1 real)
             (thing2 real)))
 (define-type
  closure-486
  (structure (least-gensym gensym)
             (make-bundle closure-372)
             (universal-zero? closure-120)
             (zero gensym)))
 (define-type
  closure-188
  (structure (kernels (cons (vector) closure-128)) (z*-k closure-129)))
 (define-type
  closure-515
  (structure (f closure-104)
             (forward? closure-489)
             (g:* closure-101)
             (g:+ closure-102)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (primal closure-342)
             (reverse? closure-420)
             (tangent closure-377)))
 (define-type
  closure-517
  (structure (f closure-105)
             (forward? closure-489)
             (g:* closure-101)
             (g:+ closure-102)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (primal closure-342)
             (reverse? closure-420)
             (tangent closure-377)))
 (define-type closure-243
              (structure (g:* closure-101) (obj1 real) (obj2 real)))
 (define-type closure-149 (structure (bundle-tag gensym)))
 (define-type closure-591 (structure (lose closure-531)))
 (define-type closure-270 (structure (x real)))
 (define-type
  closure-66
  (structure (eps1 gensym)
             (eps2 gensym)
             (f closure-105)
             (forward? closure-489)
             (operate-forward closure-39)
             (operate-reverse closure-480)
             (reverse? closure-420)
             (thing1 real)
             (thing2 real)))
 (define-type
  closure-70
  (structure (eps1 gensym)
             (eps2 gensym)
             (f closure-104)
             (forward? closure-489)
             (operate-forward closure-45)
             (operate-reverse closure-483)
             (reverse? closure-420)
             (thing1 real)
             (thing2 real)))
 (define-type closure-291 (structure (f closure-98) (thing1 real)))
 (define-type closure-617 (structure (win closure-550)))
 (define-type closure-618
              (structure (eps1 gensym) (operate-forward closure-571)))
 (define-type
  closure-562
  (structure (bundle? closure-149)
             (forward? closure-489)
             (make-bundle closure-372)
             (perturbation-of closure-31)
             (reverse? closure-420)
             (tape-cell? closure-173)
             (universal-zero? closure-120)
             (zero gensym)))
 (define-type closure-496 (structure (recur closure-435)))
 (define-type closure-498 (structure (recur closure-438)))
 (define-type
  closure-203
  (structure (g:* closure-53)
             (g:+ closure-49)
             (g:- closure-205)
             (lift-real*real->boolean closure-442)
             (lift-real*real->real closure-209)
             (lift-real->real closure-265)
             (magnitude-squared closure-301)))
 (define-type closure-180 (structure (lift-real*real->boolean closure-442)))
 (define-type
  closure-573
  (structure
   (kernels
    (cons closure-12
          (cons (vector) (cons closure-11 (cons (vector) (vector))))))
   (z*-k closure-294)))
 (define-type
  closure-577
  (structure
   (kernels
    (cons closure-12
          (cons (vector) (cons closure-11 (cons (vector) (vector))))))
   (z*-k closure-296)))
 (define-type closure-28 (structure (f closure-105) (thing1 real)))
 (define-type
  closure-318
  (structure (bundle-tag gensym)
             (least-gensym gensym)
             (make-bundle closure-372)
             (universal-zero? closure-120)
             (zero gensym)))
 (define-type
  closure-351
  (structure (c:0 (cons real real))
             (g:< closure-180)
             (iterate closure-226)
             (magnitude closure-355)))
 (define-type closure-619
              (structure (eps2 gensym) (operate-reverse closure-608)))
 (define-type
  closure-508
  (structure (c:* closure-96)
             (c:+ closure-424)
             (c:0 (cons real real))
             (g:- closure-205)
             (g:< closure-180)
             (g:<= closure-177)
             (magnitude closure-355)))
 (define-type closure-301 (structure (dot closure-305)))
 (define-type closure-173 (structure (tape-cell-tag gensym)))
 (define-type
  closure-329
  (structure (eps1 gensym)
             (eps2 gensym)
             (f closure-98)
             (operate-reverse closure-125)
             (reverse? closure-420)
             (thing1 real)
             (thing2 real)))
 (define-type
  closure-485
  (structure (bundle-tag gensym)
             (least-gensym gensym)
             (make-bundle closure-372)
             (universal-zero? closure-120)
             (zero gensym)))
 (define-type closure-511 (structure (recur closure-471)))
 (define-type closure-513 (structure (recur closure-475)))
 (define-type closure-132 (structure (kernel closure-134)))
 (define-type
  closure-105
  (structure
   (kernels
    (cons closure-12
          (cons (vector) (cons closure-11 (cons (vector) (vector))))))))
 (define-type closure-505 (structure (f closure-105) (thing1 real)))
 (define-type closure-246 (structure (least-gensym gensym)))
 (define-type
  closure-235
  (structure (c (cons real real)) (c:* closure-96) (c:+ closure-424)))
 (define-type
  closure-621
  (structure (f closure-104)
             (forward? closure-489)
             (operate-forward closure-620)
             (perturbation-of closure-31)
             (reverse? closure-420)))
 (define-type closure-622 (structure (thing real) (zero gensym)))
 (define-type closure-294 (structure (y (cons real real))))
 (define-type
  closure-122
  (structure (f closure-98)
             (forward? closure-489)
             (operate-forward closure-571)
             (perturbation-of closure-31)
             (reverse? closure-420)
             (thing1 real)
             (thing2 real)))
 (define-type
  closure-429
  (structure (new-tape-cell closure-561)
             (reverse-primal closure-42)
             (reverse? closure-420)
             (self closure-511)
             (thing2 real)))
 (define-type closure-623 (structure (thing real) (win closure-550)))
 (define-type
  closure-266
  (structure (g:* closure-53)
             (g:+ closure-49)
             (lift-real*real->real closure-209)
             (magnitude-squared closure-301)
             (primal* closure-268)
             (v:- closure-98)))
 (define-type
  closure-19
  (structure (eps1 gensym)
             (eps2 gensym)
             (f closure-105)
             (forward? closure-489)
             (operate-forward closure-557)
             (operate-reverse closure-554)
             (reverse? closure-420)
             (thing1 real)))
 (define-type closure-624 (structure (bundle-tag gensym)))
 (define-type closure-420 (structure (tape-cell? closure-173)))
 (define-type closure-489 (structure (bundle? closure-149)))
 (define-type closure-140 (structure (lose closure-588)))
 (define-type closure-42 (structure (reverse? closure-420)))
 (define-type
  closure-441
  (structure (g:* closure-53)
             (g:+ closure-49)
             (lift-real*real->real closure-209)
             (lift-real->real closure-265)
             (magnitude-squared closure-301)
             (v:- closure-98)))
 (define-type closure-466 (structure (f closure-104) (thing2 real)))
 (define-type closure-625 (structure (thing real) (win closure-461)))
 (define-type
  closure-268
  (structure (bundle? closure-149)
             (primal* closure-398)
             (tape-cell? closure-173)))
 (define-type closure-172 (structure (least-gensym gensym)))
 (define-type closure-223 (structure (recur closure-224)))
 (define-type closure-550 (structure (primal* closure-398)))
 (define-type
  closure-260
  (structure (eps1 gensym)
             (eps2 gensym)
             (f closure-104)
             (forward? closure-489)
             (operate-forward closure-144)
             (operate-reverse closure-429)
             (reverse? closure-420)
             (thing2 real)))
 (define-type closure-404 (structure (f closure-49) (i gensym)))
 (define-type closure-417 (structure (lose closure-307)))
 (define-type closure-450
              (structure (bundle? closure-149) (tape-cell? closure-173)))
 (define-type closure-543 (structure (recur closure-132)))
 (define-type closure-366 (structure (least-gensym gensym)))
 (define-type closure-604 (structure (primal* closure-398)))
 (define-type closure-626 (structure (thing real)))
 (define-type
  closure-570
  (structure (f closure-98)
             (forward? closure-489)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (reverse-primal closure-42)
             (reverse? closure-420)
             (self closure-463)
             (thing1 real)
             (thing2 real)))
 (define-type
  closure-127
  (structure (g:* closure-53)
             (g:+ closure-49)
             (g:- closure-205)
             (lift-real*real->boolean closure-442)
             (lift-real*real->real closure-209)
             (lift-real->real closure-265)
             (magnitude-squared closure-301)))
 (define-type
  closure-313
  (structure (eps1 gensym)
             (eps2 gensym)
             (f closure-98)
             (forward? closure-489)
             (operate-forward closure-580)
             (operate-reverse closure-168)
             (reverse? closure-420)
             (thing1 real)))
 (define-type
  closure-627
  (structure (f closure-104)
             (forward? closure-489)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (reverse-primal closure-42)
             (reverse? closure-420)
             (self closure-511)))
 (define-type
  closure-628
  (structure (eps1 gensym)
             (eps2 gensym)
             (f closure-104)
             (forward? closure-489)
             (operate-forward closure-620)
             (operate-reverse closure-608)
             (reverse? closure-420)))
 (define-type
  closure-597
  (structure
   (recursive-variants
    (cons
     closure-105
     (cons closure-104 (cons closure-103 (cons closure-102 closure-101)))))
   (z*-k closure-254)))
 (define-type closure-629 (structure (win closure-604)))
 (define-type
  closure-541
  (structure (bundle? closure-149)
             (forward? closure-489)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (reverse? closure-420)
             (tape-cell? closure-173)
             (universal-zero? closure-120)
             (zero gensym)))
 (define-type closure-114 (structure (self closure-115)))
 (define-type closure-205
              (structure (lift-real*real->real closure-209) (v:- closure-98)))
 (define-type closure-74 (structure (obj2 real)))
 (define-type closure-630 (structure (x real)))
 (define-type
  closure-342
  (structure (bundle? closure-149)
             (make-bundle closure-372)
             (primal closure-496)
             (reverse? closure-420)))
 (define-type
  closure-377
  (structure (bundle? closure-149)
             (make-bundle closure-372)
             (reverse? closure-420)
             (tangent closure-498)))
 (define-type
  closure-27
  (structure (eps1 gensym)
             (eps2 gensym)
             (f closure-105)
             (operate-reverse closure-554)
             (reverse? closure-420)
             (thing1 real)))
 (define-type
  closure-265
  (structure (bundle? closure-149)
             (g:* closure-53)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (tape-cell? closure-173)))
 (define-type
  closure-631
  (structure
   (kernels
    (cons closure-12
          (cons (vector) (cons closure-11 (cons (vector) (vector))))))))
 (define-type
  closure-18
  (structure (f closure-105)
             (forward? closure-489)
             (operate-forward closure-557)
             (operate-reverse closure-554)
             (reverse? closure-420)
             (thing1 real)))
 (define-type closure-155 (structure (lose closure-35)))
 (define-type closure-632
              (structure (g:* closure-101) (obj1 real) (obj2 real)))
 (define-type closure-207 (structure (y (cons real real))))
 (define-type closure-633 (structure (tape-cell-tag gensym)))
 (define-type closure-634 (structure (bundle-tag gensym)))
 (define-type
  closure-196
  (structure (bundle? closure-149)
             (forward? closure-489)
             (least-gensym gensym)
             (make-bundle closure-372)
             (universal-zero? closure-120)
             (zero gensym)))
 (define-type closure-195 (structure (tape-cell-tag gensym)))
 (define-type closure-442 (structure (primal* closure-268)))
 (define-type
  closure-94
  (structure (c:* closure-96)
             (c:+ closure-424)
             (g:* closure-53)
             (g:+ closure-49)
             (g:- closure-205)
             (g:< closure-180)
             (g:<= closure-177)
             (g:sqrt closure-282)))
 (define-type
  closure-451
  (structure (eps1 gensym)
             (eps2 gensym)
             (f closure-104)
             (operate-reverse closure-429)
             (reverse? closure-420)
             (thing2 real)))
 (define-type closure-635
              (structure (eps2 gensym) (operate-forward closure-557)))
 (define-type closure-460 (structure (thing real)))
 (define-type
  closure-540
  (structure (bundle? closure-149)
             (g:* closure-53)
             (g:+ closure-49)
             (lift-real*real->real closure-209)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (sum closure-404)
             (tape-cell? closure-173)))
 (define-type closure-96
              (structure (g:* closure-53) (g:+ closure-49) (g:- closure-205)))
 (define-type
  closure-218
  (structure
   (recursive-variants
    (cons
     closure-105
     (cons closure-104 (cons closure-103 (cons closure-102 closure-101)))))
   (z*-k closure-288)))
 (define-type closure-636
              (structure (eps1 gensym) (operate-forward closure-557)))
 (define-type closure-432 (structure (least-gensym gensym)))
 (define-type
  closure-531
  (structure (least-gensym gensym) (tape-cell? closure-173) (thing real)))
 (define-type closure-637
              (structure (primal* closure-398) (tape-cell? closure-173)))
 (define-type closure-638
              (structure (primal* closure-398) (tape-cell? closure-173)))
 (define-type
  closure-321
  (structure (eps1 gensym)
             (eps2 gensym)
             (f closure-105)
             (operate-reverse closure-480)
             (reverse? closure-420)
             (thing1 real)
             (thing2 real)))
 (define-type
  closure-323
  (structure (eps1 gensym)
             (eps2 gensym)
             (f closure-104)
             (operate-reverse closure-483)
             (reverse? closure-420)
             (thing1 real)
             (thing2 real)))
 (define-type
  closure-159
  (structure (f closure-105)
             (forward? closure-489)
             (operate-forward closure-557)
             (operate-reverse closure-554)
             (perturbation-of closure-31)
             (reverse? closure-420)
             (thing1 real)))
 (define-type closure-61 (structure (least-gensym gensym)))
 (define-type closure-639
              (structure (eps2 gensym) (operate-reverse closure-168)))
 (define-type closure-600 (structure (lose closure-549)))
 (define-type closure-640 (structure (g:* closure-101)))
 (define-type closure-368 (structure (x real) (y real)))
 (define-type closure-641 (structure (thing real) (win closure-604)))
 (define-type closure-642
              (structure (eps2 gensym) (operate-forward closure-144)))
 (define-type
  closure-65
  (structure (eps1 gensym)
             (eps2 gensym)
             (f closure-105)
             (forward? closure-489)
             (operate-forward closure-39)
             (operate-reverse closure-480)
             (reverse? closure-420)
             (thing1 real)
             (thing2 real)))
 (define-type
  closure-69
  (structure (eps1 gensym)
             (eps2 gensym)
             (f closure-104)
             (forward? closure-489)
             (operate-forward closure-45)
             (operate-reverse closure-483)
             (reverse? closure-420)
             (thing1 real)
             (thing2 real)))
 (define-type closure-108
              (structure (y (cons closure-104 (cons (vector) (vector))))))
 (define-type closure-112
              (structure (y (cons closure-105 (cons (vector) (vector))))))
 (define-type closure-643
              (structure (eps1 gensym) (operate-forward closure-144)))
 (define-type closure-247 (structure (least-gensym gensym)))
 (define-type
  closure-168
  (structure (new-tape-cell closure-561)
             (reverse-primal closure-42)
             (reverse? closure-420)
             (self closure-463)
             (thing1 real)))
 (define-type closure-344 (structure (g:+ closure-102) (x real) (y real)))
 (define-type closure-12 (structure (universal-zero? closure-120)))
 (define-type
  closure-355
  (structure (g:* closure-53) (g:+ closure-49) (g:sqrt closure-282)))
 (define-type
  closure-128
  (structure (g:* closure-53)
             (g:- closure-205)
             (lift-real*real->real closure-209)))
 (define-type
  closure-401
  (structure (f closure-98)
             (forward? closure-489)
             (g:* closure-101)
             (g:+ closure-102)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (primal closure-342)
             (reverse? closure-420)
             (tangent closure-377)))
 (define-type
  closure-419
  (structure (bundle? closure-149)
             (forward? closure-489)
             (make-bundle closure-372)
             (make-tape-cell closure-195)
             (tape-cell? closure-173)
             (universal-zero? closure-120)
             (zero gensym)))
 (define-type closure-330
              (structure (f closure-98) (thing1 real) (thing2 real)))
 (define-type
  closure-553
  (structure (f closure-105)
             (forward? closure-489)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (reverse-primal closure-42)
             (reverse? closure-420)
             (self closure-513)
             (thing1 real)))
 (define-type closure-644 (structure (lose closure-638)))
 (define-type closure-645
              (structure (eps1 gensym) (operate-forward closure-580)))
 (define-type
  closure-574
  (structure
   (recursive-variants
    (cons
     closure-105
     (cons closure-104 (cons closure-103 (cons closure-102 closure-101)))))
   (z*-k closure-294)))
 (define-type
  closure-578
  (structure
   (recursive-variants
    (cons
     closure-105
     (cons closure-104 (cons closure-103 (cons closure-102 closure-101)))))
   (z*-k closure-296)))
 (define-type closure-147 (structure (lose closure-32)))
 (define-type
  closure-421
  (structure (bundle? closure-149)
             (forward? closure-489)
             (make-bundle closure-372)
             (make-tape-cell closure-195)
             (perturbation-of closure-31)
             (tape-cell? closure-173)
             (universal-zero? closure-120)
             (zero gensym)))
 (define-type
  closure-129
  (structure (g:* closure-53)
             (g:+ closure-49)
             (g:- closure-205)
             (lift-real*real->boolean closure-442)
             (lift-real->real closure-265)
             (magnitude-squared closure-301)))
 (define-type closure-646 (structure (eps1 gensym) (eps2 gensym)))
 (define-type closure-280 (structure (kernel closure-283)))
 (define-type closure-170 (structure (lose closure-172)))
 (define-type
  closure-93
  (structure (c:+ closure-424)
             (g:* closure-53)
             (g:+ closure-49)
             (g:- closure-205)
             (g:< closure-180)
             (g:<= closure-177)
             (g:sqrt closure-282)))
 (define-type
  closure-326
  (structure (f closure-98)
             (forward? closure-489)
             (g:* closure-101)
             (g:+ closure-102)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (primal closure-342)
             (reverse? closure-420)
             (tangent closure-377)))
 (define-type
  closure-526
  (structure
   (kernels
    (cons closure-12
          (cons (vector) (cons closure-11 (cons (vector) (vector))))))
   (z*-k closure-207)))
 (define-type
  closure-143
  (structure (f closure-104)
             (forward? closure-489)
             (g:* closure-101)
             (g:+ closure-102)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (primal closure-342)
             (reverse? closure-420)
             (self closure-511)
             (tangent closure-377)
             (thing2 real)))
 (define-type
  closure-437
  (structure (bundle? closure-149)
             (make-bundle closure-372)
             (reverse? closure-420)))
 (define-type
  closure-378
  (structure (bundle? closure-149)
             (make-bundle closure-372)
             (reverse? closure-420)))
 (define-type
  closure-410
  (structure (bundle? closure-149)
             (forward? closure-489)
             (least-gensym gensym)
             (make-bundle closure-372)
             (make-tape-cell closure-195)
             (universal-zero? closure-120)
             (zero gensym)))
 (define-type closure-138 (structure (kernels (cons (vector) closure-128))))
 (define-type
  closure-480
  (structure (new-tape-cell closure-561)
             (reverse-primal closure-42)
             (reverse? closure-420)
             (self closure-513)
             (thing1 real)
             (thing2 real)))
 (define-type
  closure-483
  (structure (new-tape-cell closure-561)
             (reverse-primal closure-42)
             (reverse? closure-420)
             (self closure-511)
             (thing1 real)
             (thing2 real)))
 (define-type
  closure-473
  (structure (f closure-104)
             (forward? closure-489)
             (g:* closure-101)
             (g:+ closure-102)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (primal closure-342)
             (reverse? closure-420)
             (tangent closure-377)))
 (define-type
  closure-477
  (structure (f closure-105)
             (forward? closure-489)
             (g:* closure-101)
             (g:+ closure-102)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (primal closure-342)
             (reverse? closure-420)
             (tangent closure-377)))
 (define-type
  closure-106
  (structure
   (kernels
    (cons closure-12
          (cons (vector) (cons closure-11 (cons (vector) (vector))))))
   (z*-k closure-108)))
 (define-type
  closure-110
  (structure
   (kernels
    (cons closure-12
          (cons (vector) (cons closure-11 (cons (vector) (vector))))))
   (z*-k closure-112)))
 (define-type
  closure-178
  (structure (g:* closure-53)
             (g:+ closure-49)
             (g:- closure-205)
             (g:< closure-180)
             (g:sqrt closure-282)))
 (define-type closure-381 (structure (z*-k closure-541)))
 (define-type closure-647
              (structure (eps2 gensym) (operate-reverse closure-429)))
 (define-type
  closure-493
  (structure (g:* closure-53) (g:/ closure-396) (g:sqrt closure-298)))
 (define-type
  closure-648
  (structure (eps1 gensym)
             (eps2 gensym)
             (f closure-104)
             (forward? closure-489)
             (operate-forward closure-620)
             (operate-reverse closure-608)
             (reverse? closure-420)))
 (define-type closure-649
              (structure (eps2 gensym) (operate-forward closure-39)))
 (define-type closure-650
              (structure (eps2 gensym) (operate-forward closure-45)))
 (define-type closure-224 (structure (kernel closure-320)))
 (define-type closure-77 (structure (obj1 real) (obj2 real)))
 (define-type
  closure-371
  (structure (bundle-tag gensym)
             (least-gensym gensym)
             (universal-zero? closure-120)
             (zero gensym)))
 (define-type closure-651
              (structure (eps1 gensym) (operate-forward closure-39)))
 (define-type closure-652
              (structure (eps1 gensym) (operate-forward closure-45)))
 (define-type closure-653 (structure (tape-cell-tag gensym)))
 (define-type
  closure-213
  (structure (g:+ closure-102)
             (universal-zero? closure-120)
             (x real)
             (y real)))
 (define-type
  closure-588
  (structure (df/dx closure-493)
             (new-tape-cell closure-561)
             (self closure-543)
             (tape-cell? closure-173)
             (thing real)))
 (define-type closure-354 (structure (c:* closure-96) (c:+ closure-424)))
 (define-type
  closure-519
  (structure (bundle? closure-149)
             (g:* closure-53)
             (g:+ closure-49)
             (lift-real*real->real closure-209)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (tape-cell? closure-173)))
 (define-type
  closure-11
  (structure (forward? closure-489)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (primal closure-342)
             (reverse? closure-420)
             (tangent closure-377)))
 (define-type
  closure-581
  (structure (f closure-98)
             (forward? closure-489)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (reverse-primal closure-42)
             (reverse? closure-420)
             (self closure-463)
             (thing1 real)))
 (define-type
  closure-654
  (structure
   (recursive-variants
    (cons
     closure-105
     (cons closure-104 (cons closure-103 (cons closure-102 closure-101)))))))
 (define-type
  closure-364
  (structure (g:sqrt closure-282) (magnitude-squared closure-301)))
 (define-type closure-305 (structure (g:* closure-53) (sum closure-404)))
 (define-type
  closure-275
  (structure (f closure-98)
             (forward? closure-489)
             (g:* closure-101)
             (g:+ closure-102)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (primal closure-342)
             (reverse? closure-420)
             (self closure-463)
             (tangent closure-377)
             (thing1 real)
             (thing2 real)))
 (define-type closure-177 (structure (lift-real*real->boolean closure-442)))
 (define-type
  closure-407
  (structure (g:* closure-53)
             (g:+ closure-49)
             (g:- closure-205)
             (lift-real*real->boolean closure-442)
             (magnitude-squared closure-301)))
 (define-type closure-332
              (structure (f closure-105) (thing1 real) (thing2 real)))
 (define-type closure-334
              (structure (f closure-104) (thing1 real) (thing2 real)))
 (define-type closure-655 (structure (y real)))
 (define-type
  closure-38
  (structure (f closure-105)
             (forward? closure-489)
             (g:* closure-101)
             (g:+ closure-102)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (primal closure-342)
             (reverse? closure-420)
             (self closure-513)
             (tangent closure-377)
             (thing1 real)
             (thing2 real)))
 (define-type
  closure-44
  (structure (f closure-104)
             (forward? closure-489)
             (g:* closure-101)
             (g:+ closure-102)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (primal closure-342)
             (reverse? closure-420)
             (self closure-511)
             (tangent closure-377)
             (thing1 real)
             (thing2 real)))
 (define-type
  closure-656
  (structure (eps1 gensym)
             (eps2 gensym)
             (f closure-104)
             (operate-reverse closure-608)
             (reverse? closure-420)))
 (define-type
  closure-144
  (structure (g:* closure-101)
             (g:+ closure-102)
             (make-bundle closure-372)
             (primal closure-342)
             (self closure-511)
             (tangent closure-377)
             (thing2 real)))
 (define-type
  closure-352
  (structure (c:0 (cons real real))
             (g:< closure-180)
             (iterate closure-226)
             (magnitude closure-355)
             (step closure-354)))
 (define-type closure-394
              (structure (f closure-98) (thing1 real) (thing2 real)))
 (define-type closure-657
              (structure (eps1 gensym) (operate-reverse closure-125)))
 (define-type
  closure-426
  (structure (f closure-104)
             (forward? closure-489)
             (operate-forward closure-144)
             (perturbation-of closure-31)
             (reverse? closure-420)
             (thing2 real)))
 (define-type
  closure-383
  (structure (bundle? closure-149)
             (forward? closure-489)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (reverse? closure-420)
             (tape-cell? closure-173)
             (universal-zero? closure-120)
             (zero gensym)))
 (define-type closure-424 (structure (g:+ closure-49)))
 (define-type
  closure-154
  (structure (g:* closure-53)
             (g:+ closure-49)
             (g:- closure-205)
             (lift-real*real->boolean closure-442)
             (lift-real*real->real closure-209)
             (lift-real->real closure-265)
             (magnitude-squared closure-301)))
 (define-type
  closure-221
  (structure (eps1 gensym)
             (eps2 gensym)
             (f closure-105)
             (forward? closure-489)
             (operate-forward closure-557)
             (operate-reverse closure-554)
             (reverse? closure-420)
             (thing1 real)))
 (define-type closure-658
              (structure (eps2 gensym) (operate-forward closure-620)))
 (define-type closure-659 (structure (y real)))
 (define-type closure-310 (structure (mandelbrot? closure-352)))
 (define-type closure-561 (structure (make-tape-cell closure-195)))
 (define-type closure-660 (structure (lose closure-637)))
 (define-type
  closure-317
  (structure (bundle-tag gensym)
             (least-gensym gensym)
             (make-bundle closure-372)
             (universal-zero? closure-120)
             (zero gensym)))
 (define-type closure-661
              (structure (eps1 gensym) (operate-forward closure-620)))
 (define-type
  closure-284
  (structure (g:* closure-53)
             (g:+ closure-49)
             (g:- closure-205)
             (g:< closure-180)
             (g:<= closure-177)
             (g:sqrt closure-282)))
 (define-type closure-662 (structure (g:* closure-101)))
 (define-type
  closure-554
  (structure (new-tape-cell closure-561)
             (reverse-primal closure-42)
             (reverse? closure-420)
             (self closure-513)
             (thing1 real)))
 (define-type closure-663 (structure (g:* closure-101) (obj2 real)))
 (define-type closure-238 (structure (g:+ closure-102) (x real)))
 (define-type
  closure-261
  (structure (eps1 gensym)
             (eps2 gensym)
             (f closure-104)
             (forward? closure-489)
             (operate-forward closure-144)
             (operate-reverse closure-429)
             (reverse? closure-420)
             (thing2 real)))
 (define-type
  closure-356
  (structure (c:* closure-96)
             (c:+ closure-424)
             (c:0 (cons real real))
             (g:- closure-205)
             (g:< closure-180)
             (g:<= closure-177)))
 (define-type
  closure-264
  (structure (bundle? closure-149)
             (g:* closure-53)
             (g:+ closure-49)
             (lift-real*real->real closure-209)
             (magnitude-squared closure-301)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (tape-cell? closure-173)
             (v:- closure-98)))
 (define-type
  closure-453
  (structure (bundle? closure-149)
             (g:* closure-53)
             (g:+ closure-49)
             (lift-real*real->real closure-209)
             (magnitude-squared closure-301)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (tape-cell? closure-173)
             (v:- closure-98)))
 (define-type closure-435 (structure (kernel closure-437)))
 (define-type closure-438 (structure (kernel closure-378)))
 (define-type closure-664
              (structure (eps2 gensym) (operate-reverse closure-125)))
 (define-type
  closure-584
  (structure (bundle? closure-149)
             (forward? closure-489)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (reverse? closure-420)
             (tape-cell? closure-173)
             (universal-zero? closure-120)
             (zero gensym)))
 (define-type closure-151 (structure (z*-k closure-541)))
 (define-type
  closure-527
  (structure
   (recursive-variants
    (cons
     closure-105
     (cons closure-104 (cons closure-103 (cons closure-102 closure-101)))))
   (z*-k closure-207)))
 (define-type closure-665 (structure (bundle-tag gensym)))
 (define-type
  closure-456
  (structure (bundle? closure-149)
             (forward? closure-489)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (reverse? closure-420)
             (tape-cell? closure-173)
             (universal-zero? closure-120)
             (zero gensym)))
 (define-type
  closure-448
  (structure (bundle? closure-149)
             (forward? closure-489)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (primal closure-342)
             (reverse? closure-420)
             (tangent closure-377)
             (tape-cell? closure-173)
             (universal-zero? closure-120)
             (zero gensym)))
 (define-type
  closure-118
  (structure (least-gensym gensym)
             (universal-zero? closure-120)
             (zero gensym)))
 (define-type closure-57 (structure (self closure-59)))
 (define-type closure-192 (structure (least-gensym gensym)))
 (define-type
  closure-589
  (structure (df/dx closure-493)
             (g:* closure-53)
             (make-bundle closure-372)
             (self closure-543)))
 (define-type
  closure-303
  (structure (bundle? closure-149)
             (g:* closure-53)
             (g:+ closure-49)
             (lift-real*real->real closure-209)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (tape-cell? closure-173)
             (v:- closure-98)))
 (define-type closure-62 (structure (least-gensym gensym)))
 (define-type
  closure-189
  (structure (recursive-variants (cons closure-138 closure-137))
             (z*-k closure-129)))
 (define-type
  closure-461
  (structure (df/dx closure-493)
             (new-tape-cell closure-561)
             (self closure-543)
             (thing real)))
 (define-type
  closure-666
  (structure (f closure-104)
             (forward? closure-489)
             (g:* closure-101)
             (g:+ closure-102)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (primal closure-342)
             (reverse? closure-420)
             (self closure-511)
             (tangent closure-377)))
 (define-type
  closure-3
  (structure
   (recursive-variants
    (cons
     closure-105
     (cons closure-104 (cons closure-103 (cons closure-102 closure-101)))))
   (z*-k closure-108)))
 (define-type
  closure-14
  (structure
   (recursive-variants
    (cons
     closure-105
     (cons closure-104 (cons closure-103 (cons closure-102 closure-101)))))
   (z*-k closure-112)))
 (define-type closure-536 (structure (least-gensym gensym)))
 (define-type
  closure-39
  (structure (g:* closure-101)
             (g:+ closure-102)
             (make-bundle closure-372)
             (primal closure-342)
             (self closure-513)
             (tangent closure-377)
             (thing1 real)
             (thing2 real)))
 (define-type
  closure-45
  (structure (g:* closure-101)
             (g:+ closure-102)
             (make-bundle closure-372)
             (primal closure-342)
             (self closure-511)
             (tangent closure-377)
             (thing1 real)
             (thing2 real)))
 (define-type closure-117 (structure (least-gensym gensym) (zero gensym)))
 (define-type closure-372 (structure (bundle-tag gensym)))
 (define-type
  closure-406
  (structure (g:* closure-53)
             (g:+ closure-49)
             (g:- closure-205)
             (g:/ closure-396)
             (lift-real*real->boolean closure-442)
             (lift-real->real closure-265)
             (magnitude-squared closure-301)))
 (define-type
  closure-390
  (structure (f closure-98)
             (forward? closure-489)
             (operate-forward closure-580)
             (operate-reverse closure-168)
             (reverse? closure-420)
             (thing1 real)))
 (define-type closure-667 (structure (thing real)))
 (define-type closure-471 (structure (kernel closure-473)))
 (define-type closure-475 (structure (kernel closure-477)))
 (define-type closure-668 (structure (thing real)))
 (define-type
  closure-237
  (structure (g:+ closure-102) (universal-zero? closure-120) (x real)))
 (define-type closure-307 (structure (thing real)))
 (define-type
  closure-166
  (structure (f closure-98)
             (forward? closure-489)
             (operate-forward closure-580)
             (operate-reverse closure-168)
             (perturbation-of closure-31)
             (reverse? closure-420)
             (thing1 real)))
 (define-type closure-669
              (structure (eps1 gensym) (operate-reverse closure-554)))
 (define-type
  closure-89
  (structure (bundle? closure-149)
             (forward? closure-489)
             (least-gensym gensym)
             (make-bundle closure-372)
             (make-tape-cell closure-195)
             (tape-cell-tag gensym)
             (universal-zero? closure-120)
             (zero gensym)))
 (define-type
  closure-165
  (structure (f closure-98)
             (forward? closure-489)
             (operate-forward closure-580)
             (perturbation-of closure-31)
             (reverse? closure-420)
             (thing1 real)))
 (define-type closure-585 (structure (f closure-104) (thing2 real)))
 (define-type
  closure-608
  (structure (new-tape-cell closure-561)
             (reverse-primal closure-42)
             (reverse? closure-420)
             (self closure-511)))
 (define-type
  closure-125
  (structure (new-tape-cell closure-561)
             (reverse-primal closure-42)
             (reverse? closure-420)
             (self closure-463)
             (thing1 real)
             (thing2 real)))
 (define-type closure-670 (structure (g:* closure-101)))
 (define-type
  closure-229
  (structure (bundle? closure-149)
             (forward? closure-489)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (reverse? closure-420)
             (tape-cell? closure-173)
             (universal-zero? closure-120)
             (zero gensym)))
 (define-type closure-182 (structure (self closure-10)))
 (define-type closure-185 (structure (self closure-16)))
 (define-type closure-298 (structure (recur closure-280)))
 (define-type
  closure-444
  (structure (f closure-98)
             (forward? closure-489)
             (g:* closure-101)
             (g:+ closure-102)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (primal closure-342)
             (reverse? closure-420)
             (self closure-463)
             (tangent closure-377)
             (thing1 real)))
 (define-type closure-671 (structure (thing real) (win closure-589)))
 (define-type closure-672
              (structure (eps1 gensym) (operate-reverse closure-429)))
 (define-type closure-320 (structure (g:- closure-205) (g:<= closure-177)))
 (define-type
  closure-197
  (structure (bundle? closure-149)
             (forward? closure-489)
             (least-gensym gensym)
             (make-bundle closure-372)
             (tape-cell-tag gensym)
             (universal-zero? closure-120)
             (zero gensym)))
 (define-type
  closure-673
  (structure (f closure-104)
             (forward? closure-489)
             (operate-forward closure-620)
             (operate-reverse closure-608)
             (reverse? closure-420)))
 (define-type closure-674
              (structure (eps2 gensym) (operate-reverse closure-480)))
 (define-type closure-675
              (structure (eps2 gensym) (operate-reverse closure-483)))
 (define-type closure-676 (structure (g:+ closure-102) (x real) (y real)))
 (define-type
  closure-176
  (structure (g:* closure-53)
             (g:+ closure-49)
             (g:- closure-205)
             (g:sqrt closure-282)
             (lift-real*real->boolean closure-442)))
 (define-type
  closure-592
  (structure (f closure-105)
             (forward? closure-489)
             (g:* closure-101)
             (g:+ closure-102)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (primal closure-342)
             (reverse? closure-420)
             (self closure-513)
             (tangent closure-377)
             (thing1 real)))
 (define-type
  closure-571
  (structure (g:* closure-101)
             (g:+ closure-102)
             (make-bundle closure-372)
             (primal closure-342)
             (self closure-463)
             (tangent closure-377)
             (thing1 real)
             (thing2 real)))
 (define-type closure-413 (structure (primal* closure-268)))
 (define-type closure-677
              (structure (eps2 gensym) (operate-forward closure-571)))
 (define-type closure-399 (structure (kernel closure-450)))
 (define-type closure-137 (structure (kernels (cons (vector) closure-128))))
 (define-type
  closure-620
  (structure (g:* closure-101)
             (g:+ closure-102)
             (make-bundle closure-372)
             (primal closure-342)
             (self closure-511)
             (tangent closure-377)))
 (define-type closure-678
              (structure (eps1 gensym) (operate-reverse closure-168)))
 (define-type
  closure-524
  (structure (bundle? closure-149)
             (forward? closure-489)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (primal closure-342)
             (reverse? closure-420)
             (tangent closure-377)
             (tape-cell? closure-173)
             (universal-zero? closure-120)
             (zero gensym)))
 (define-type
  closure-479
  (structure (f closure-105)
             (forward? closure-489)
             (operate-forward closure-39)
             (perturbation-of closure-31)
             (reverse? closure-420)
             (thing1 real)
             (thing2 real)))
 (define-type
  closure-482
  (structure (f closure-104)
             (forward? closure-489)
             (operate-forward closure-45)
             (perturbation-of closure-31)
             (reverse? closure-420)
             (thing1 real)
             (thing2 real)))
 (define-type closure-679
              (structure (g:* closure-101) (obj1 real) (obj2 real)))
 (define-type
  closure-490
  (structure (bundle? closure-149)
             (least-gensym gensym)
             (make-bundle closure-372)
             (universal-zero? closure-120)
             (zero gensym)))
 (define-type closure-680
              (structure (eps2 gensym) (operate-reverse closure-554)))
 (define-type
  closure-681
  (structure (f closure-104)
             (forward? closure-489)
             (operate-forward closure-620)
             (operate-reverse closure-608)
             (perturbation-of closure-31)
             (reverse? closure-420)))
 (define-type
  closure-272
  (structure (bundle? closure-149)
             (forward? closure-489)
             (least-gensym gensym)
             (make-bundle closure-372)
             (make-tape-cell closure-195)
             (tape-cell-tag gensym)
             (universal-zero? closure-120)
             (zero gensym)))
 (define-type
  closure-384
  (structure (bundle? closure-149)
             (forward? closure-489)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (reverse? closure-420)
             (tape-cell? closure-173)
             (universal-zero? closure-120)
             (zero gensym)))
 (define-type
  closure-90
  (structure (bundle? closure-149)
             (forward? closure-489)
             (least-gensym gensym)
             (make-bundle closure-372)
             (make-tape-cell closure-195)
             (tape-cell-tag gensym)
             (universal-zero? closure-120)
             (zero gensym)))
 (define-type closure-682 (structure (thing real)))
 (define-type closure-683 (structure (f closure-104)))
 (define-type
  closure-374
  (structure (bundle? closure-149)
             (forward? closure-489)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (primal closure-342)
             (reverse? closure-420)
             (tape-cell? closure-173)
             (universal-zero? closure-120)
             (zero gensym)))
 (define-type closure-73 (structure (g:* closure-101) (obj2 real)))
 (define-type closure-564
              (structure (f closure-105) (thing1 real) (thing2 real)))
 (define-type closure-566
              (structure (f closure-104) (thing1 real) (thing2 real)))
 (define-type
  closure-387
  (structure (bundle? closure-149)
             (df/dx closure-493)
             (g:* closure-53)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (tape-cell? closure-173)))
 (define-type closure-684 (structure (bundle-tag gensym)))
 (define-type closure-685
              (structure (eps1 gensym) (operate-reverse closure-480)))
 (define-type closure-686
              (structure (eps1 gensym) (operate-reverse closure-483)))
 (define-type closure-687 (structure (win closure-550)))
 (define-type closure-398 (structure (recur closure-399)))
 (define-type
  closure-559
  (structure (g:* closure-53)
             (g:+ closure-49)
             (g:- closure-205)
             (g:< closure-180)
             (g:<= closure-177)
             (g:sqrt closure-282)))
 (define-type
  closure-557
  (structure (g:* closure-101)
             (g:+ closure-102)
             (make-bundle closure-372)
             (primal closure-342)
             (self closure-513)
             (tangent closure-377)
             (thing1 real)))
 (define-type
  closure-202
  (structure (g:* closure-53)
             (g:+ closure-49)
             (lift-real*real->boolean closure-442)
             (lift-real*real->real closure-209)
             (lift-real->real closure-265)
             (magnitude-squared closure-301)))
 (define-type
  closure-228
  (structure (bundle? closure-149)
             (forward? closure-489)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (reverse? closure-420)
             (tape-cell? closure-173)
             (universal-zero? closure-120)
             (zero gensym)))
 (define-type
  closure-161
  (structure (f closure-98)
             (forward? closure-489)
             (operate-forward closure-571)
             (operate-reverse closure-125)
             (reverse? closure-420)
             (thing1 real)
             (thing2 real)))
 (define-type
  closure-145
  (structure (f closure-104)
             (forward? closure-489)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (reverse-primal closure-42)
             (reverse? closure-420)
             (self closure-511)
             (thing2 real)))
 (define-type closure-688 (structure (win closure-604)))
 (define-type
  closure-162
  (structure (eps1 gensym)
             (eps2 gensym)
             (f closure-98)
             (forward? closure-489)
             (operate-forward closure-571)
             (operate-reverse closure-125)
             (reverse? closure-420)
             (thing1 real)
             (thing2 real)))
 (define-type
  closure-339
  (structure (bundle? closure-149)
             (forward? closure-489)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (reverse? closure-420)
             (tape-cell? closure-173)
             (universal-zero? closure-120)
             (zero gensym)))
 (define-type
  closure-82
  (structure (f closure-105)
             (forward? closure-489)
             (operate-forward closure-39)
             (operate-reverse closure-480)
             (reverse? closure-420)
             (thing1 real)
             (thing2 real)))
 (define-type
  closure-86
  (structure (f closure-104)
             (forward? closure-489)
             (operate-forward closure-45)
             (operate-reverse closure-483)
             (reverse? closure-420)
             (thing1 real)
             (thing2 real)))
 (define-type
  closure-375
  (structure (bundle? closure-149)
             (forward? closure-489)
             (make-bundle closure-372)
             (new-tape-cell closure-561)
             (perturbation-of closure-31)
             (primal closure-342)
             (reverse? closure-420)
             (tangent closure-377)
             (tape-cell? closure-173)
             (universal-zero? closure-120)
             (zero gensym)))
 (define-type
  closure-596
  (structure
   (kernels
    (cons closure-12
          (cons (vector) (cons closure-11 (cons (vector) (vector))))))
   (z*-k closure-254)))
 (define-type closure-430 (structure (least-gensym gensym)))
 (define-type closure-464 (structure (kernel closure-401)))
 (define (operation-2 the-closure the-formals)
   (argument-types
    closure-3
    (cons closure-12
          (cons (vector) (cons closure-11 (cons (vector) (vector)))))
    closure-10)
   (let ((v:+ (car the-formals))
         (lift-real*real->real (car (cdr (cdr the-formals)))))
     (operation-9
      (closure-3-z*-k the-closure)
      (cons
       (operation-8 v:+ (closure-3-recursive-variants the-closure))
       (cons
        (operation-7 (vector) (closure-3-recursive-variants the-closure))
        (cons
         (operation-6 lift-real*real->real
                      (closure-3-recursive-variants the-closure))
         (cons
          (operation-5 (vector) (closure-3-recursive-variants the-closure))
          (operation-4 (vector)
                       (closure-3-recursive-variants the-closure)))))))))
 (define (operation-13 the-closure the-formals)
   (argument-types
    closure-14
    (cons closure-12
          (cons (vector) (cons closure-11 (cons (vector) (vector)))))
    closure-16)
   (let ((v:+ (car the-formals))
         (lift-real*real->real (car (cdr (cdr the-formals)))))
     (operation-15
      (closure-14-z*-k the-closure)
      (cons
       (operation-8 v:+ (closure-14-recursive-variants the-closure))
       (cons
        (operation-7 (vector) (closure-14-recursive-variants the-closure))
        (cons
         (operation-6 lift-real*real->real
                      (closure-14-recursive-variants the-closure))
         (cons
          (operation-5 (vector) (closure-14-recursive-variants the-closure))
          (operation-4 (vector)
                       (closure-14-recursive-variants the-closure)))))))))
 (define (operation-17 the-closure the-formals)
   (argument-types closure-18 (cons gensym gensym) real)
   (let ((eps1 (car the-formals)) (eps2 (cdr the-formals)))
     (operation-20
      (make-closure-19 eps1
                       eps2
                       (closure-18-f the-closure)
                       (closure-18-forward? the-closure)
                       (closure-18-operate-forward the-closure)
                       (closure-18-operate-reverse the-closure)
                       (closure-18-reverse? the-closure)
                       (closure-18-thing1 the-closure))
      ())))
 (define (operation-21 the-closure the-formals)
   (argument-types closure-22 () (cons real real))
   (let ()
     (operation-25
      (closure-22-iterate the-closure)
      (cons
       (operation-24 (closure-22-g:- the-closure)
                     (cons (closure-22-count the-closure) 1))
       (cons
        (closure-22-f the-closure)
        (operation-23 (closure-22-f the-closure)
                      (closure-22-x the-closure)))))))
 (define (operation-26 the-closure the-formals)
   (argument-types closure-27 () real)
   (let ()
     (operation-29
      (make-closure-28 (closure-27-f the-closure)
                       (closure-27-thing1 the-closure))
      ())))
 (define (operation-30 the-closure the-formals)
   (argument-types closure-31 real gensym)
   (let ()
     (operation-33
      (closure-31-bundle? the-closure)
      (cons
       1
       (cons
        (vector)
        (make-closure-32 (closure-31-least-gensym the-closure)
                         (closure-31-tape-cell? the-closure)))))))
 (define (operation-34 the-closure the-formals)
   (argument-types closure-31 real gensym)
   (let ()
     (operation-36
      (closure-31-bundle? the-closure)
      (cons
       -1
       (cons
        (vector)
        (make-closure-35 (closure-31-least-gensym the-closure)
                         (closure-31-tape-cell? the-closure)))))))
 (define (operation-37 the-closure the-formals)
   (argument-types closure-38 closure-42 real)
   (let ((reverse-primal the-formals))
     (operation-41
      (make-closure-40 (closure-38-f the-closure)
                       (closure-38-forward? the-closure)
                       (closure-38-new-tape-cell the-closure)
                       (closure-38-perturbation-of the-closure)
                       reverse-primal
                       (closure-38-reverse? the-closure)
                       (closure-38-self the-closure)
                       (closure-38-thing1 the-closure)
                       (closure-38-thing2 the-closure))
      (make-closure-39 (closure-38-g:* the-closure)
                       (closure-38-g:+ the-closure)
                       (closure-38-make-bundle the-closure)
                       (closure-38-primal the-closure)
                       (closure-38-self the-closure)
                       (closure-38-tangent the-closure)
                       (closure-38-thing1 the-closure)
                       (closure-38-thing2 the-closure)))))
 (define (operation-43 the-closure the-formals)
   (argument-types closure-44 closure-42 real)
   (let ((reverse-primal the-formals))
     (operation-47
      (make-closure-46 (closure-44-f the-closure)
                       (closure-44-forward? the-closure)
                       (closure-44-new-tape-cell the-closure)
                       (closure-44-perturbation-of the-closure)
                       reverse-primal
                       (closure-44-reverse? the-closure)
                       (closure-44-self the-closure)
                       (closure-44-thing1 the-closure)
                       (closure-44-thing2 the-closure))
      (make-closure-45 (closure-44-g:* the-closure)
                       (closure-44-g:+ the-closure)
                       (closure-44-make-bundle the-closure)
                       (closure-44-primal the-closure)
                       (closure-44-self the-closure)
                       (closure-44-tangent the-closure)
                       (closure-44-thing1 the-closure)
                       (closure-44-thing2 the-closure)))))
 (define (operation-48 the-closure the-formals)
   (argument-types closure-49 (cons real real) real)
   (let ((args the-formals))
     (operation-51
      (operation-50
       (closure-49-lift-real*real->real the-closure)
       (cons (closure-49-v:+ the-closure) (cons (vector) (vector))))
      args)))
 (define (operation-52 the-closure the-formals)
   (argument-types closure-53 (cons real real) real)
   (let ((args the-formals))
     (operation-55
      (operation-54
       (closure-53-lift-real*real->real the-closure)
       (cons (closure-53-v:* the-closure) (cons (vector) (vector))))
      args)))
 (define (operation-56 the-closure the-formals)
   (argument-types (vector) closure-59 closure-59)
   (let ((self the-formals))
     (operation-58 (make-closure-57 self) ())))
 (define (operation-60 the-closure the-formals)
   (argument-types closure-61 (vector) bool)
   (let ()
     (operation-63 (make-closure-62 (closure-61-least-gensym the-closure))
                   (vector))))
 (define (operation-64 the-closure the-formals)
   (argument-types closure-65 () real)
   (let ()
     (operation-67
      (make-closure-66 (closure-65-eps1 the-closure)
                       (closure-65-eps2 the-closure)
                       (closure-65-f the-closure)
                       (closure-65-forward? the-closure)
                       (closure-65-operate-forward the-closure)
                       (closure-65-operate-reverse the-closure)
                       (closure-65-reverse? the-closure)
                       (closure-65-thing1 the-closure)
                       (closure-65-thing2 the-closure))
      ())))
 (define (operation-68 the-closure the-formals)
   (argument-types closure-69 () real)
   (let ()
     (operation-71
      (make-closure-70 (closure-69-eps1 the-closure)
                       (closure-69-eps2 the-closure)
                       (closure-69-f the-closure)
                       (closure-69-forward? the-closure)
                       (closure-69-operate-forward the-closure)
                       (closure-69-operate-reverse the-closure)
                       (closure-69-reverse? the-closure)
                       (closure-69-thing1 the-closure)
                       (closure-69-thing2 the-closure))
      ())))
 (define (operation-72 the-closure the-formals)
   (argument-types closure-73 () real)
   (let ()
     (operation-75 (make-closure-74 (closure-73-obj2 the-closure)) ())))
 (define (operation-76 the-closure the-formals)
   (argument-types closure-77 () real)
   (let ()
     (let ((temp-78
            (cons (closure-77-obj1 the-closure)
                  (closure-77-obj2 the-closure))))
       (* (car temp-78) (cdr temp-78)))))
 (define (operation-79 the-closure the-formals)
   (argument-types closure-80 () real)
   (let ()
     (operation-83
      (make-closure-82 (closure-80-f the-closure)
                       (closure-80-forward? the-closure)
                       (closure-80-operate-forward the-closure)
                       (closure-80-operate-reverse the-closure)
                       (closure-80-reverse? the-closure)
                       (closure-80-thing1 the-closure)
                       (closure-80-thing2 the-closure))
      (cons
       (operation-81 (closure-80-perturbation-of the-closure)
                     (closure-80-thing1 the-closure))
       (operation-81 (closure-80-perturbation-of the-closure)
                     (closure-80-thing2 the-closure))))))
 (define (operation-84 the-closure the-formals)
   (argument-types closure-85 () real)
   (let ()
     (operation-87
      (make-closure-86 (closure-85-f the-closure)
                       (closure-85-forward? the-closure)
                       (closure-85-operate-forward the-closure)
                       (closure-85-operate-reverse the-closure)
                       (closure-85-reverse? the-closure)
                       (closure-85-thing1 the-closure)
                       (closure-85-thing2 the-closure))
      (cons
       (operation-81 (closure-85-perturbation-of the-closure)
                     (closure-85-thing1 the-closure))
       (operation-81 (closure-85-perturbation-of the-closure)
                     (closure-85-thing2 the-closure))))))
 (define (operation-88 the-closure the-formals)
   (argument-types closure-89 (vector) bool)
   (let ()
     (operation-91
      (make-closure-90 (closure-89-bundle? the-closure)
                       (closure-89-forward? the-closure)
                       (closure-89-least-gensym the-closure)
                       (closure-89-make-bundle the-closure)
                       (closure-89-make-tape-cell the-closure)
                       (closure-89-tape-cell-tag the-closure)
                       (closure-89-universal-zero? the-closure)
                       (closure-89-zero the-closure))
      (vector))))
 (define (operation-92 the-closure the-formals)
   (argument-types closure-93 closure-96 bool)
   (let ((c:* the-formals))
     (operation-95
      (make-closure-94 c:*
                       (closure-93-c:+ the-closure)
                       (closure-93-g:* the-closure)
                       (closure-93-g:+ the-closure)
                       (closure-93-g:- the-closure)
                       (closure-93-g:< the-closure)
                       (closure-93-g:<= the-closure)
                       (closure-93-g:sqrt the-closure))
      (cons (real 0) (real 0)))))
 (define (operation-97 the-closure the-formals)
   (argument-types closure-98 (cons real real) real)
   (let ((x (car the-formals)) (y (cdr the-formals)))
     (operation-48
      (closure-98-g:+ the-closure)
      (cons x (operation-99 (closure-98-g:* the-closure) (cons -1 y))))))
 (define (operation-100 the-closure the-formals)
   (argument-types
    (vector)
    (cons
     closure-108
     (cons closure-12
           (cons (vector) (cons closure-11 (cons (vector) (vector))))))
    closure-10)
   (let ((z*-k (car the-formals)) (kernels (cdr the-formals)))
     (operation-107
      (make-closure-106 kernels z*-k)
      (cons
       (make-closure-105 kernels)
       (cons
        (make-closure-104 kernels)
        (cons
         (make-closure-103 kernels)
         (cons (make-closure-102 kernels) (make-closure-101 kernels))))))))
 (define (operation-109 the-closure the-formals)
   (argument-types
    (vector)
    (cons
     closure-112
     (cons closure-12
           (cons (vector) (cons closure-11 (cons (vector) (vector))))))
    closure-16)
   (let ((z*-k (car the-formals)) (kernels (cdr the-formals)))
     (operation-111
      (make-closure-110 kernels z*-k)
      (cons
       (make-closure-105 kernels)
       (cons
        (make-closure-104 kernels)
        (cons
         (make-closure-103 kernels)
         (cons (make-closure-102 kernels) (make-closure-101 kernels))))))))
 (define (operation-113 the-closure the-formals)
   (argument-types closure-114 () closure-115)
   (let ()
     (closure-114-self the-closure)))
 (define (operation-116 the-closure the-formals)
   (argument-types closure-117 closure-120 bool)
   (let ((universal-zero? the-formals))
     (operation-119
      (make-closure-118 (closure-117-least-gensym the-closure)
                        universal-zero?
                        (closure-117-zero the-closure))
      (gensym))))
 (define (operation-58 the-closure the-formals)
   (argument-types closure-57 () closure-59)
   (let ()
     (closure-57-self the-closure)))
 (define (operation-121 the-closure the-formals)
   (argument-types closure-122 closure-125 real)
   (let ((operate-reverse the-formals))
     (operation-124
      (make-closure-123 (closure-122-f the-closure)
                        (closure-122-forward? the-closure)
                        (closure-122-operate-forward the-closure)
                        operate-reverse
                        (closure-122-perturbation-of the-closure)
                        (closure-122-reverse? the-closure)
                        (closure-122-thing1 the-closure)
                        (closure-122-thing2 the-closure))
      ())))
 (define (operation-126 the-closure the-formals)
   (argument-types closure-127 () bool)
   (let ()
     (operation-130
      (vector)
      (cons
       (make-closure-129 (closure-127-g:* the-closure)
                         (closure-127-g:+ the-closure)
                         (closure-127-g:- the-closure)
                         (closure-127-lift-real*real->boolean the-closure)
                         (closure-127-lift-real->real the-closure)
                         (closure-127-magnitude-squared the-closure))
       (cons
        (vector)
        (make-closure-128 (closure-127-g:* the-closure)
                          (closure-127-g:- the-closure)
                          (closure-127-lift-real*real->real the-closure)))))))
 (define (operation-131 the-closure the-formals)
   (argument-types (vector) closure-134 closure-115)
   (let ((kernel the-formals))
     (operation-133 (make-closure-132 kernel) (make-closure-132 kernel))))
 (define (operation-135 the-closure the-formals)
   (argument-types (vector) (cons closure-138 closure-137) closure-136)
   (let ((v:/ (car the-formals)) (g:/ (cdr the-formals)))
     (make-closure-136 g:/)))
 (define (operation-139 the-closure the-formals)
   (argument-types closure-140 () real)
   (let ()
     (operation-141 (closure-140-lose the-closure) ())))
 (define (operation-142 the-closure the-formals)
   (argument-types closure-143 closure-42 real)
   (let ((reverse-primal the-formals))
     (operation-146
      (make-closure-145 (closure-143-f the-closure)
                        (closure-143-forward? the-closure)
                        (closure-143-new-tape-cell the-closure)
                        (closure-143-perturbation-of the-closure)
                        reverse-primal
                        (closure-143-reverse? the-closure)
                        (closure-143-self the-closure)
                        (closure-143-thing2 the-closure))
      (make-closure-144 (closure-143-g:* the-closure)
                        (closure-143-g:+ the-closure)
                        (closure-143-make-bundle the-closure)
                        (closure-143-primal the-closure)
                        (closure-143-self the-closure)
                        (closure-143-tangent the-closure)
                        (closure-143-thing2 the-closure)))))
 (define (operation-33 the-closure the-formals)
   (argument-types closure-149 (cons real (cons (vector) closure-32)) gensym)
   (let ((lose (cdr (cdr the-formals))))
     (operation-148 (make-closure-147 lose) ())))
 (define (operation-150 the-closure the-formals)
   (argument-types closure-151 (cons (vector) (vector)) bool)
   (let ()
     (operation-152 (closure-151-z*-k the-closure) (cons (vector) (vector)))))
 (define (operation-153 the-closure the-formals)
   (argument-types closure-154 (vector) bool)
   (let ()
     (operation-126
      (make-closure-127 (closure-154-g:* the-closure)
                        (closure-154-g:+ the-closure)
                        (closure-154-g:- the-closure)
                        (closure-154-lift-real*real->boolean the-closure)
                        (closure-154-lift-real*real->real the-closure)
                        (closure-154-lift-real->real the-closure)
                        (closure-154-magnitude-squared the-closure))
      ())))
 (define (operation-36 the-closure the-formals)
   (argument-types closure-149 (cons real (cons (vector) closure-35)) gensym)
   (let ((lose (cdr (cdr the-formals))))
     (operation-156 (make-closure-155 lose) ())))
 (define (operation-75 the-closure the-formals)
   (argument-types closure-74 () real)
   (let ()
     (let ((temp-157 (cons -1 (closure-74-obj2 the-closure))))
       (* -1 (cdr temp-157)))))
 (define (operation-158 the-closure the-formals)
   (argument-types closure-159 () real)
   (let ()
     (operation-17
      (make-closure-18 (closure-159-f the-closure)
                       (closure-159-forward? the-closure)
                       (closure-159-operate-forward the-closure)
                       (closure-159-operate-reverse the-closure)
                       (closure-159-reverse? the-closure)
                       (closure-159-thing1 the-closure))
      (cons
       (operation-81 (closure-159-perturbation-of the-closure)
                     (closure-159-thing1 the-closure))
       (operation-34 (closure-159-perturbation-of the-closure) -1)))))
 (define (operation-160 the-closure the-formals)
   (argument-types closure-161 (cons gensym gensym) real)
   (let ((eps1 (car the-formals)) (eps2 (cdr the-formals)))
     (operation-163
      (make-closure-162 eps1
                        eps2
                        (closure-161-f the-closure)
                        (closure-161-forward? the-closure)
                        (closure-161-operate-forward the-closure)
                        (closure-161-operate-reverse the-closure)
                        (closure-161-reverse? the-closure)
                        (closure-161-thing1 the-closure)
                        (closure-161-thing2 the-closure))
      ())))
 (define (operation-164 the-closure the-formals)
   (argument-types closure-165 closure-168 real)
   (let ((operate-reverse the-formals))
     (operation-167
      (make-closure-166 (closure-165-f the-closure)
                        (closure-165-forward? the-closure)
                        (closure-165-operate-forward the-closure)
                        operate-reverse
                        (closure-165-perturbation-of the-closure)
                        (closure-165-reverse? the-closure)
                        (closure-165-thing1 the-closure))
      ())))
 (define (operation-169 the-closure the-formals)
   (argument-types closure-173 (cons real (cons (vector) closure-172)) gensym)
   (let ((lose (cdr (cdr the-formals))))
     (operation-171 (make-closure-170 lose) ())))
 (define (operation-174 the-closure the-formals)
   (argument-types closure-173 (cons real (cons (vector) closure-172)) gensym)
   (let ((lose (cdr (cdr the-formals))))
     (operation-171 (make-closure-170 lose) ())))
 (define (operation-175 the-closure the-formals)
   (argument-types closure-176 closure-180 bool)
   (let ((g:< the-formals))
     (operation-179
      (make-closure-178 (closure-176-g:* the-closure)
                        (closure-176-g:+ the-closure)
                        (closure-176-g:- the-closure)
                        g:<
                        (closure-176-g:sqrt the-closure))
      (make-closure-177 (closure-176-lift-real*real->boolean the-closure)))))
 (define (operation-83 the-closure the-formals)
   (argument-types closure-82 (cons gensym gensym) real)
   (let ((eps1 (car the-formals)) (eps2 (cdr the-formals)))
     (operation-64
      (make-closure-65 eps1
                       eps2
                       (closure-82-f the-closure)
                       (closure-82-forward? the-closure)
                       (closure-82-operate-forward the-closure)
                       (closure-82-operate-reverse the-closure)
                       (closure-82-reverse? the-closure)
                       (closure-82-thing1 the-closure)
                       (closure-82-thing2 the-closure))
      ())))
 (define (operation-87 the-closure the-formals)
   (argument-types closure-86 (cons gensym gensym) real)
   (let ((eps1 (car the-formals)) (eps2 (cdr the-formals)))
     (operation-68
      (make-closure-69 eps1
                       eps2
                       (closure-86-f the-closure)
                       (closure-86-forward? the-closure)
                       (closure-86-operate-forward the-closure)
                       (closure-86-operate-reverse the-closure)
                       (closure-86-reverse? the-closure)
                       (closure-86-thing1 the-closure)
                       (closure-86-thing2 the-closure))
      ())))
 (define (operation-181 the-closure the-formals)
   (argument-types (vector) closure-10 closure-10)
   (let ((self the-formals))
     (operation-183 (make-closure-182 self) ())))
 (define (operation-184 the-closure the-formals)
   (argument-types (vector) closure-16 closure-16)
   (let ((self the-formals))
     (operation-186 (make-closure-185 self) ())))
 (define (operation-187 the-closure the-formals)
   (argument-types closure-188 (cons closure-138 closure-137) bool)
   (let ((recursive-variants the-formals))
     (operation-190
      (make-closure-189 recursive-variants (closure-188-z*-k the-closure))
      (closure-188-kernels the-closure))))
 (define (operation-191 the-closure the-formals)
   (argument-types (vector) gensym bool)
   (let ((least-gensym the-formals))
     (operation-193 (make-closure-192 least-gensym) (vector))))
 (define (operation-194 the-closure the-formals)
   (argument-types closure-196 gensym bool)
   (let ((tape-cell-tag the-formals))
     (operation-198
      (make-closure-197 (closure-196-bundle? the-closure)
                        (closure-196-forward? the-closure)
                        (closure-196-least-gensym the-closure)
                        (closure-196-make-bundle the-closure)
                        tape-cell-tag
                        (closure-196-universal-zero? the-closure)
                        (closure-196-zero the-closure))
      (make-closure-195 tape-cell-tag))))
 (define (operation-198 the-closure the-formals)
   (argument-types closure-197 closure-195 bool)
   (let ((make-tape-cell the-formals))
     (operation-200
      (make-closure-199 (closure-197-bundle? the-closure)
                        (closure-197-forward? the-closure)
                        (closure-197-least-gensym the-closure)
                        (closure-197-make-bundle the-closure)
                        make-tape-cell
                        (closure-197-tape-cell-tag the-closure)
                        (closure-197-universal-zero? the-closure)
                        (closure-197-zero the-closure))
      (vector))))
 (define (operation-201 the-closure the-formals)
   (argument-types closure-202 closure-205 bool)
   (let ((g:- the-formals))
     (operation-204
      (make-closure-203 (closure-202-g:* the-closure)
                        (closure-202-g:+ the-closure)
                        g:-
                        (closure-202-lift-real*real->boolean the-closure)
                        (closure-202-lift-real*real->real the-closure)
                        (closure-202-lift-real->real the-closure)
                        (closure-202-magnitude-squared the-closure))
      (vector))))
 (define (operation-206 the-closure the-formals)
   (argument-types
    closure-207
    (cons closure-211
          (cons closure-210 (cons closure-209 (cons closure-49 closure-53))))
    real)
   (let ((v:+ (car the-formals))
         (v:* (car (cdr the-formals)))
         (lift-real*real->real (car (cdr (cdr the-formals))))
         (g:+ (car (cdr (cdr (cdr the-formals)))))
         (g:* (cdr (cdr (cdr (cdr the-formals))))))
     (operation-208 v:+ (closure-207-y the-closure))))
 (define (operation-212 the-closure the-formals)
   (argument-types closure-211 (cons real real) real)
   (let ((x (car the-formals)) (y (cdr the-formals)))
     (operation-214
      (make-closure-213 (closure-211-g:+ the-closure)
                        (closure-211-universal-zero? the-closure)
                        x
                        y)
      ())))
 (define (operation-7 the-closure the-formals)
   (argument-types
    (vector)
    (cons
     closure-105
     (cons closure-104 (cons closure-103 (cons closure-102 closure-101))))
    closure-210)
   (let ((v:+ (car the-formals))
         (v:* (car (cdr the-formals)))
         (lift-real*real->real (car (cdr (cdr the-formals))))
         (g:+ (car (cdr (cdr (cdr the-formals)))))
         (g:* (cdr (cdr (cdr (cdr the-formals))))))
     (make-closure-210 g:*)))
 (define (operation-215 the-closure the-formals)
   (argument-types closure-172 () gensym)
   (let ()
     (closure-172-least-gensym the-closure)))
 (define (operation-216 the-closure the-formals)
   (argument-types
    closure-217
    (cons
     closure-105
     (cons closure-104 (cons closure-103 (cons closure-102 closure-101))))
    bool)
   (let ((recursive-variants the-formals))
     (operation-219
      (make-closure-218 recursive-variants (closure-217-z*-k the-closure))
      (closure-217-kernels the-closure))))
 (define (operation-220 the-closure the-formals)
   (argument-types closure-221 () real)
   (let ()
     (operation-26
      (make-closure-27 (closure-221-eps1 the-closure)
                       (closure-221-eps2 the-closure)
                       (closure-221-f the-closure)
                       (closure-221-operate-reverse the-closure)
                       (closure-221-reverse? the-closure)
                       (closure-221-thing1 the-closure))
      ())))
 (define (operation-222 the-closure the-formals)
   (argument-types closure-224 closure-224 closure-226)
   (let ((recur the-formals))
     (operation-225 (closure-224-kernel the-closure)
                    (make-closure-223 recur))))
 (define (operation-227 the-closure the-formals)
   (argument-types closure-228 (vector) bool)
   (let ()
     (operation-230
      (make-closure-229 (closure-228-bundle? the-closure)
                        (closure-228-forward? the-closure)
                        (closure-228-make-bundle the-closure)
                        (closure-228-new-tape-cell the-closure)
                        (closure-228-perturbation-of the-closure)
                        (closure-228-reverse? the-closure)
                        (closure-228-tape-cell? the-closure)
                        (closure-228-universal-zero? the-closure)
                        (closure-228-zero the-closure))
      (vector))))
 (define (operation-231 the-closure the-formals)
   (argument-types closure-226
                   (cons real (cons closure-235 (cons real real)))
                   (cons real real))
   (let ((count (car the-formals)) (f (car (cdr the-formals)))
                                   (x (cdr (cdr the-formals))))
     (if (operation-234 (closure-226-g:<= the-closure) (cons count 0))
         (operation-233 (make-closure-232 x) ())
         (operation-21
          (make-closure-22 count
                           f
                           (closure-226-g:- the-closure)
                           (closure-226-iterate the-closure)
                           x)
          ()))))
 (define (operation-236 the-closure the-formals)
   (argument-types closure-237 () real)
   (let ()
     (operation-239
      (make-closure-238 (closure-237-g:+ the-closure)
                        (closure-237-x the-closure))
      ())))
 (define (operation-190 the-closure the-formals)
   (argument-types closure-189 (cons (vector) closure-128) bool)
   (let ((g:/ (cdr the-formals)))
     (operation-241
      (closure-189-z*-k the-closure)
      (cons
       (operation-135 (vector) (closure-189-recursive-variants the-closure))
       (operation-240 g:/ (closure-189-recursive-variants the-closure))))))
 (define (operation-242 the-closure the-formals)
   (argument-types closure-243 () real)
   (let ()
     (operation-76
      (make-closure-77 (closure-243-obj1 the-closure)
                       (closure-243-obj2 the-closure))
      ())))
 (define (operation-219 the-closure the-formals)
   (argument-types
    closure-218
    (cons closure-12
          (cons (vector) (cons closure-11 (cons (vector) (vector)))))
    bool)
   (let ((v:+ (car the-formals))
         (lift-real*real->real (car (cdr (cdr the-formals)))))
     (operation-244
      (closure-218-z*-k the-closure)
      (cons
       (operation-8 v:+ (closure-218-recursive-variants the-closure))
       (cons
        (operation-7 (vector) (closure-218-recursive-variants the-closure))
        (cons
         (operation-6 lift-real*real->real
                      (closure-218-recursive-variants the-closure))
         (cons
          (operation-5 (vector) (closure-218-recursive-variants the-closure))
          (operation-4 (vector)
                       (closure-218-recursive-variants the-closure)))))))))
 (define (operation-204 the-closure the-formals)
   (argument-types closure-203 (vector) bool)
   (let ()
     (operation-153
      (make-closure-154 (closure-203-g:* the-closure)
                        (closure-203-g:+ the-closure)
                        (closure-203-g:- the-closure)
                        (closure-203-lift-real*real->boolean the-closure)
                        (closure-203-lift-real*real->real the-closure)
                        (closure-203-lift-real->real the-closure)
                        (closure-203-magnitude-squared the-closure))
      (vector))))
 (define (operation-245 the-closure the-formals)
   (argument-types closure-246 (vector) bool)
   (let ()
     (operation-248 (make-closure-247 (closure-246-least-gensym the-closure))
                    (vector))))
 (define (operation-249 the-closure the-formals)
   (argument-types closure-96
                   (cons (cons real real) (cons real real))
                   (cons real real))
   (let ((z1 (car the-formals)) (z2 (cdr the-formals)))
     (cons
      (operation-252
       (closure-96-g:- the-closure)
       (cons
        (operation-52
         (closure-96-g:* the-closure)
         (cons (operation-250 (vector) z1) (operation-250 (vector) z2)))
        (operation-52
         (closure-96-g:* the-closure)
         (cons (operation-251 (vector) z1) (operation-251 (vector) z2)))))
      (operation-48
       (closure-96-g:+ the-closure)
       (cons
        (operation-52
         (closure-96-g:* the-closure)
         (cons (operation-250 (vector) z1) (operation-251 (vector) z2)))
        (operation-52
         (closure-96-g:* the-closure)
         (cons (operation-251 (vector) z1) (operation-250 (vector) z2))))))))
 (define (operation-253 the-closure the-formals)
   (argument-types closure-104 (cons real real) real)
   (let ((y the-formals))
     (operation-255
      (vector)
      (cons (make-closure-254 y) (closure-104-kernels the-closure)))))
 (define (operation-256 the-closure the-formals)
   (argument-types closure-173 (cons real (cons (vector) closure-172)) gensym)
   (let ((thing (car the-formals)) (lose (cdr (cdr the-formals))))
     (operation-171 (make-closure-170 lose) ())))
 (define (operation-257 the-closure the-formals)
   (argument-types (vector) (vector) bool)
   (let ()
     (operation-258 (vector) (vector))))
 (define (operation-259 the-closure the-formals)
   (argument-types closure-260 () real)
   (let ()
     (operation-262
      (make-closure-261 (closure-260-eps1 the-closure)
                        (closure-260-eps2 the-closure)
                        (closure-260-f the-closure)
                        (closure-260-forward? the-closure)
                        (closure-260-operate-forward the-closure)
                        (closure-260-operate-reverse the-closure)
                        (closure-260-reverse? the-closure)
                        (closure-260-thing2 the-closure))
      ())))
 (define (operation-263 the-closure the-formals)
   (argument-types closure-264 closure-268 bool)
   (let ((primal* the-formals))
     (operation-267
      (make-closure-266 (closure-264-g:* the-closure)
                        (closure-264-g:+ the-closure)
                        (closure-264-lift-real*real->real the-closure)
                        (closure-264-magnitude-squared the-closure)
                        primal*
                        (closure-264-v:- the-closure))
      (make-closure-265 (closure-264-bundle? the-closure)
                        (closure-264-g:* the-closure)
                        (closure-264-make-bundle the-closure)
                        (closure-264-new-tape-cell the-closure)
                        (closure-264-tape-cell? the-closure)))))
 (define (operation-269 the-closure the-formals)
   (argument-types closure-270 () real)
   (let ()
     (let ((temp-271 (cons (closure-270-x the-closure) -1)))
       (+ (car temp-271) -1))))
 (define (operation-91 the-closure the-formals)
   (argument-types closure-90 (vector) bool)
   (let ()
     (operation-273
      (make-closure-272 (closure-90-bundle? the-closure)
                        (closure-90-forward? the-closure)
                        (closure-90-least-gensym the-closure)
                        (closure-90-make-bundle the-closure)
                        (closure-90-make-tape-cell the-closure)
                        (closure-90-tape-cell-tag the-closure)
                        (closure-90-universal-zero? the-closure)
                        (closure-90-zero the-closure))
      (vector))))
 (define (operation-274 the-closure the-formals)
   (argument-types closure-59 (cons real real) real)
   (let ((thing1 (car the-formals)) (thing2 (cdr the-formals)))
     (operation-276
      (make-closure-275 (closure-59-f the-closure)
                        (closure-59-forward? the-closure)
                        (closure-59-g:* the-closure)
                        (closure-59-g:+ the-closure)
                        (closure-59-make-bundle the-closure)
                        (closure-59-new-tape-cell the-closure)
                        (closure-59-perturbation-of the-closure)
                        (closure-59-primal the-closure)
                        (closure-59-reverse? the-closure)
                        (closure-59-self the-closure)
                        (closure-59-tangent the-closure)
                        thing1
                        thing2)
      (make-closure-42 (closure-59-reverse? the-closure)))))
 (define (operation-277 the-closure the-formals)
   (argument-types closure-49 (cons real real) real)
   (let ((args the-formals))
     (operation-278
      (operation-50
       (closure-49-lift-real*real->real the-closure)
       (cons (closure-49-v:+ the-closure) (cons (vector) (vector))))
      args)))
 (define (operation-279 the-closure the-formals)
   (argument-types (vector) closure-283 closure-282)
   (let ((kernel the-formals))
     (operation-281 (make-closure-280 kernel) (make-closure-280 kernel))))
 (define (operation-179 the-closure the-formals)
   (argument-types closure-178 closure-177 bool)
   (let ((g:<= the-formals))
     (operation-285
      (make-closure-284 (closure-178-g:* the-closure)
                        (closure-178-g:+ the-closure)
                        (closure-178-g:- the-closure)
                        (closure-178-g:< the-closure)
                        g:<=
                        (closure-178-g:sqrt the-closure))
      ())))
 (define (operation-258 the-closure the-formals)
   (argument-types (vector) (vector) bool)
   (let ()
     (operation-286 (vector) (vector))))
 (define (operation-287 the-closure the-formals)
   (argument-types
    (vector)
    (cons
     closure-288
     (cons closure-12
           (cons (vector) (cons closure-11 (cons (vector) (vector))))))
    bool)
   (let ((z*-k (car the-formals)) (kernels (cdr the-formals)))
     (operation-216
      (make-closure-217 kernels z*-k)
      (cons
       (make-closure-105 kernels)
       (cons
        (make-closure-104 kernels)
        (cons
         (make-closure-103 kernels)
         (cons (make-closure-102 kernels) (make-closure-101 kernels))))))))
 (define (operation-289 the-closure the-formals)
   (argument-types closure-290 () real)
   (let ()
     (operation-292
      (make-closure-291 (closure-290-f the-closure)
                        (closure-290-thing1 the-closure))
      ())))
 (define (operation-293 the-closure the-formals)
   (argument-types
    closure-294
    (cons closure-211
          (cons closure-210 (cons closure-209 (cons closure-49 closure-53))))
    real)
   (let ((v:+ (car the-formals))
         (v:* (car (cdr the-formals)))
         (lift-real*real->real (car (cdr (cdr the-formals))))
         (g:+ (car (cdr (cdr (cdr the-formals)))))
         (g:* (cdr (cdr (cdr (cdr the-formals))))))
     (operation-212 v:+ (closure-294-y the-closure))))
 (define (operation-295 the-closure the-formals)
   (argument-types
    closure-296
    (cons closure-211
          (cons closure-210 (cons closure-209 (cons closure-49 closure-53))))
    real)
   (let ((v:+ (car the-formals))
         (v:* (car (cdr the-formals)))
         (lift-real*real->real (car (cdr (cdr the-formals))))
         (g:+ (car (cdr (cdr (cdr the-formals)))))
         (g:* (cdr (cdr (cdr (cdr the-formals))))))
     (operation-297 v:* (closure-296-y the-closure))))
 (define (operation-281 the-closure the-formals)
   (argument-types closure-280 closure-280 closure-282)
   (let ((recur the-formals))
     (operation-299 (closure-280-kernel the-closure)
                    (make-closure-298 recur))))
 (define (operation-300 the-closure the-formals)
   (argument-types closure-302 closure-305 bool)
   (let ((dot the-formals))
     (operation-304
      (make-closure-303 (closure-302-bundle? the-closure)
                        (closure-302-g:* the-closure)
                        (closure-302-g:+ the-closure)
                        (closure-302-lift-real*real->real the-closure)
                        (closure-302-make-bundle the-closure)
                        (closure-302-new-tape-cell the-closure)
                        (closure-302-tape-cell? the-closure)
                        (closure-302-v:- the-closure))
      (make-closure-301 dot))))
 (define (operation-25 the-closure the-formals)
   (argument-types closure-223
                   (cons real (cons closure-235 (cons real real)))
                   (cons real real))
   (let ((y the-formals))
     (operation-231
      (operation-222 (closure-223-recur the-closure)
                     (closure-223-recur the-closure))
      y)))
 (define (operation-306 the-closure the-formals)
   (argument-types closure-307 () real)
   (let ()
     (closure-307-thing the-closure)))
 (define (operation-308 the-closure the-formals)
   (argument-types closure-98 (cons real real) real)
   (let ((x (car the-formals)))
     (operation-277 (closure-98-g:+ the-closure) (cons x -1))))
 (define (operation-309 the-closure the-formals)
   (argument-types closure-310 () bool)
   (let ()
     (operation-311 (closure-310-mandelbrot? the-closure)
                    (cons (real (real .5)) (real (real .7))))))
 (define (operation-312 the-closure the-formals)
   (argument-types closure-313 () real)
   (let ()
     (operation-315
      (make-closure-314 (closure-313-eps1 the-closure)
                        (closure-313-eps2 the-closure)
                        (closure-313-f the-closure)
                        (closure-313-forward? the-closure)
                        (closure-313-operate-forward the-closure)
                        (closure-313-operate-reverse the-closure)
                        (closure-313-reverse? the-closure)
                        (closure-313-thing1 the-closure))
      ())))
 (define (operation-316 the-closure the-formals)
   (argument-types closure-317 (vector) bool)
   (let ()
     (operation-319
      (make-closure-318 (closure-317-bundle-tag the-closure)
                        (closure-317-least-gensym the-closure)
                        (closure-317-make-bundle the-closure)
                        (closure-317-universal-zero? the-closure)
                        (closure-317-zero the-closure))
      (vector))))
 (define (operation-225 the-closure the-formals)
   (argument-types closure-320 closure-223 closure-226)
   (let ((iterate the-formals))
     (make-closure-226 (closure-320-g:- the-closure)
                       (closure-320-g:<= the-closure)
                       iterate)))
 (define (operation-239 the-closure the-formals)
   (argument-types closure-238 () real)
   (let ()
     (operation-269 (make-closure-270 (closure-238-x the-closure)) ())))
 (define (operation-67 the-closure the-formals)
   (argument-types closure-66 () real)
   (let ()
     (operation-322
      (make-closure-321 (closure-66-eps1 the-closure)
                        (closure-66-eps2 the-closure)
                        (closure-66-f the-closure)
                        (closure-66-operate-reverse the-closure)
                        (closure-66-reverse? the-closure)
                        (closure-66-thing1 the-closure)
                        (closure-66-thing2 the-closure))
      ())))
 (define (operation-71 the-closure the-formals)
   (argument-types closure-70 () real)
   (let ()
     (operation-324
      (make-closure-323 (closure-70-eps1 the-closure)
                        (closure-70-eps2 the-closure)
                        (closure-70-f the-closure)
                        (closure-70-operate-reverse the-closure)
                        (closure-70-reverse? the-closure)
                        (closure-70-thing1 the-closure)
                        (closure-70-thing2 the-closure))
      ())))
 (define (operation-233 the-closure the-formals)
   (argument-types closure-232 () (cons real real))
   (let ()
     (closure-232-x the-closure)))
 (define (operation-325 the-closure the-formals)
   (argument-types closure-209
                   (cons closure-98 (cons (vector) (vector)))
                   closure-59)
   (let ((f (car the-formals)))
     (operation-327
      (make-closure-326 f
                        (closure-209-forward? the-closure)
                        (closure-209-g:* the-closure)
                        (closure-209-g:+ the-closure)
                        (closure-209-make-bundle the-closure)
                        (closure-209-new-tape-cell the-closure)
                        (closure-209-perturbation-of the-closure)
                        (closure-209-primal the-closure)
                        (closure-209-reverse? the-closure)
                        (closure-209-tangent the-closure))
      (vector))))
 (define (operation-328 the-closure the-formals)
   (argument-types closure-329 () real)
   (let ()
     (operation-331
      (make-closure-330 (closure-329-f the-closure)
                        (closure-329-thing1 the-closure)
                        (closure-329-thing2 the-closure))
      ())))
 (define (operation-322 the-closure the-formals)
   (argument-types closure-321 () real)
   (let ()
     (operation-333
      (make-closure-332 (closure-321-f the-closure)
                        (closure-321-thing1 the-closure)
                        (closure-321-thing2 the-closure))
      ())))
 (define (operation-324 the-closure the-formals)
   (argument-types closure-323 () real)
   (let ()
     (operation-335
      (make-closure-334 (closure-323-f the-closure)
                        (closure-323-thing1 the-closure)
                        (closure-323-thing2 the-closure))
      ())))
 (define (operation-171 the-closure the-formals)
   (argument-types closure-170 () gensym)
   (let ()
     (operation-215 (closure-170-lose the-closure) ())))
 (define (operation-336 the-closure the-formals)
   (argument-types
    closure-254
    (cons closure-211
          (cons closure-210 (cons closure-209 (cons closure-49 closure-53))))
    real)
   (let ((v:+ (car the-formals))
         (v:* (car (cdr the-formals)))
         (lift-real*real->real (car (cdr (cdr the-formals))))
         (g:+ (car (cdr (cdr (cdr the-formals)))))
         (g:* (cdr (cdr (cdr (cdr the-formals))))))
     (operation-337 v:* (closure-254-y the-closure))))
 (define (operation-338 the-closure the-formals)
   (argument-types closure-339 closure-342 bool)
   (let ((primal the-formals))
     (operation-341
      (make-closure-340 (closure-339-bundle? the-closure)
                        (closure-339-forward? the-closure)
                        (closure-339-make-bundle the-closure)
                        (closure-339-new-tape-cell the-closure)
                        (closure-339-perturbation-of the-closure)
                        primal
                        (closure-339-reverse? the-closure)
                        (closure-339-tape-cell? the-closure)
                        (closure-339-universal-zero? the-closure)
                        (closure-339-zero the-closure))
      (vector))))
 (define (operation-286 the-closure the-formals)
   (argument-types (vector) (vector) bool)
   (let ()
     (operation-343 (vector) (vector))))
 (define (operation-214 the-closure the-formals)
   (argument-types closure-213 () real)
   (let ()
     (operation-345
      (make-closure-344 (closure-213-g:+ the-closure)
                        (closure-213-x the-closure)
                        (closure-213-y the-closure))
      ())))
 (define (operation-346 the-closure the-formals)
   (argument-types closure-347 (cons gensym gensym) real)
   (let ((eps1 (car the-formals)) (eps2 (cdr the-formals)))
     (operation-259
      (make-closure-260 eps1
                        eps2
                        (closure-347-f the-closure)
                        (closure-347-forward? the-closure)
                        (closure-347-operate-forward the-closure)
                        (closure-347-operate-reverse the-closure)
                        (closure-347-reverse? the-closure)
                        (closure-347-thing2 the-closure))
      ())))
 (define (operation-348 the-closure the-formals)
   (argument-types closure-349 () real)
   (let ()
     (operation-328
      (make-closure-329 (closure-349-eps1 the-closure)
                        (closure-349-eps2 the-closure)
                        (closure-349-f the-closure)
                        (closure-349-operate-reverse the-closure)
                        (closure-349-reverse? the-closure)
                        (closure-349-thing1 the-closure)
                        (closure-349-thing2 the-closure))
      ())))
 (define (operation-350 the-closure the-formals)
   (argument-types closure-351 closure-354 bool)
   (let ((step the-formals))
     (operation-353
      (vector)
      (make-closure-352 (closure-351-c:0 the-closure)
                        (closure-351-g:< the-closure)
                        (closure-351-iterate the-closure)
                        (closure-351-magnitude the-closure)
                        step))))
 (define (operation-95 the-closure the-formals)
   (argument-types closure-94 (cons real real) bool)
   (let ((c:0 the-formals))
     (operation-357
      (make-closure-356 (closure-94-c:* the-closure)
                        (closure-94-c:+ the-closure)
                        c:0
                        (closure-94-g:- the-closure)
                        (closure-94-g:< the-closure)
                        (closure-94-g:<= the-closure))
      (make-closure-355 (closure-94-g:* the-closure)
                        (closure-94-g:+ the-closure)
                        (closure-94-g:sqrt the-closure)))))
 (define (operation-183 the-closure the-formals)
   (argument-types closure-182 () closure-10)
   (let ()
     (closure-182-self the-closure)))
 (define (operation-186 the-closure the-formals)
   (argument-types closure-185 () closure-16)
   (let ()
     (closure-185-self the-closure)))
 (define (operation-358 the-closure the-formals)
   (argument-types closure-105 (cons real real) real)
   (let ((y the-formals))
     (operation-359
      (vector)
      (cons (make-closure-294 y) (closure-105-kernels the-closure)))))
 (define (operation-360 the-closure the-formals)
   (argument-types closure-104 (cons real real) real)
   (let ((y the-formals))
     (operation-361
      (vector)
      (cons (make-closure-296 y) (closure-104-kernels the-closure)))))
 (define (operation-362 the-closure the-formals)
   (argument-types closure-363 closure-364 bool)
   (let ((magnitude the-formals))
     (operation-175
      (make-closure-176 (closure-363-g:* the-closure)
                        (closure-363-g:+ the-closure)
                        (closure-363-g:- the-closure)
                        (closure-363-g:sqrt the-closure)
                        (closure-363-lift-real*real->boolean the-closure))
      (make-closure-180 (closure-363-lift-real*real->boolean the-closure)))))
 (define (operation-365 the-closure the-formals)
   (argument-types closure-366 gensym bool)
   (let ((zero the-formals))
     (operation-116
      (make-closure-117 (closure-366-least-gensym the-closure) zero)
      (make-closure-120 zero))))
 (define (operation-367 the-closure the-formals)
   (argument-types closure-368 () real)
   (let ()
     (let ((temp-369
            (cons (closure-368-x the-closure) (closure-368-y the-closure))))
       (+ (car temp-369) (cdr temp-369)))))
 (define (operation-370 the-closure the-formals)
   (argument-types closure-371 closure-372 bool)
   (let ((make-bundle the-formals))
     (operation-316
      (make-closure-317 (closure-371-bundle-tag the-closure)
                        (closure-371-least-gensym the-closure)
                        make-bundle
                        (closure-371-universal-zero? the-closure)
                        (closure-371-zero the-closure))
      (vector))))
 (define (operation-373 the-closure the-formals)
   (argument-types closure-374 closure-377 bool)
   (let ((tangent the-formals))
     (operation-376
      (make-closure-375 (closure-374-bundle? the-closure)
                        (closure-374-forward? the-closure)
                        (closure-374-make-bundle the-closure)
                        (closure-374-new-tape-cell the-closure)
                        (closure-374-perturbation-of the-closure)
                        (closure-374-primal the-closure)
                        (closure-374-reverse? the-closure)
                        tangent
                        (closure-374-tape-cell? the-closure)
                        (closure-374-universal-zero? the-closure)
                        (closure-374-zero the-closure))
      (vector))))
 (define (operation-341 the-closure the-formals)
   (argument-types closure-340 (vector) bool)
   (let ()
     (operation-373
      (make-closure-374 (closure-340-bundle? the-closure)
                        (closure-340-forward? the-closure)
                        (closure-340-make-bundle the-closure)
                        (closure-340-new-tape-cell the-closure)
                        (closure-340-perturbation-of the-closure)
                        (closure-340-primal the-closure)
                        (closure-340-reverse? the-closure)
                        (closure-340-tape-cell? the-closure)
                        (closure-340-universal-zero? the-closure)
                        (closure-340-zero the-closure))
      (operation-379
       (vector)
       (make-closure-378 (closure-340-bundle? the-closure)
                         (closure-340-make-bundle the-closure)
                         (closure-340-reverse? the-closure))))))
 (define (operation-299 the-closure the-formals)
   (argument-types closure-283 closure-298 closure-282)
   (let ((g:sqrt the-formals))
     (make-closure-282 (closure-283-g:* the-closure)
                       (closure-283-g:/ the-closure)
                       g:sqrt
                       (closure-283-lift-real->real the-closure))))
 (define (operation-353 the-closure the-formals)
   (argument-types (vector) closure-352 bool)
   (let ((mandelbrot? the-formals))
     (operation-309 (make-closure-310 mandelbrot?) ())))
 (define (operation-130 the-closure the-formals)
   (argument-types (vector)
                   (cons closure-129 (cons (vector) closure-128))
                   bool)
   (let ((z*-k (car the-formals)) (kernels (cdr the-formals)))
     (operation-187
      (make-closure-188 kernels z*-k)
      (cons (make-closure-138 kernels) (make-closure-137 kernels)))))
 (define (operation-380 the-closure the-formals)
   (argument-types closure-381 (cons (vector) (vector)) bool)
   (let ()
     (operation-150 (make-closure-151 (closure-381-z*-k the-closure))
                    (cons (vector) (vector)))))
 (define (operation-382 the-closure the-formals)
   (argument-types closure-383 (vector) bool)
   (let ()
     (operation-385
      (make-closure-384 (closure-383-bundle? the-closure)
                        (closure-383-forward? the-closure)
                        (closure-383-make-bundle the-closure)
                        (closure-383-new-tape-cell the-closure)
                        (closure-383-perturbation-of the-closure)
                        (closure-383-reverse? the-closure)
                        (closure-383-tape-cell? the-closure)
                        (closure-383-universal-zero? the-closure)
                        (closure-383-zero the-closure))
      ())))
 (define (operation-386 the-closure the-formals)
   (argument-types closure-387 (vector) closure-115)
   (let ()
     (operation-388
      (vector)
      (operation-131
       (vector)
       (make-closure-134 (closure-387-bundle? the-closure)
                         (closure-387-df/dx the-closure)
                         (closure-387-g:* the-closure)
                         (closure-387-make-bundle the-closure)
                         (closure-387-new-tape-cell the-closure)
                         (closure-387-tape-cell? the-closure))))))
 (define (operation-389 the-closure the-formals)
   (argument-types closure-390 (cons gensym gensym) real)
   (let ((eps1 (car the-formals)) (eps2 (cdr the-formals)))
     (operation-312
      (make-closure-313 eps1
                        eps2
                        (closure-390-f the-closure)
                        (closure-390-forward? the-closure)
                        (closure-390-operate-forward the-closure)
                        (closure-390-operate-reverse the-closure)
                        (closure-390-reverse? the-closure)
                        (closure-390-thing1 the-closure))
      ())))
 (define (operation-9 the-closure the-formals)
   (argument-types
    closure-108
    (cons closure-211
          (cons closure-210 (cons closure-209 (cons closure-49 closure-53))))
    closure-10)
   (let ((v:+ (car the-formals))
         (v:* (car (cdr the-formals)))
         (lift-real*real->real (car (cdr (cdr the-formals))))
         (g:+ (car (cdr (cdr (cdr the-formals)))))
         (g:* (cdr (cdr (cdr (cdr the-formals))))))
     (operation-391 lift-real*real->real (closure-108-y the-closure))))
 (define (operation-15 the-closure the-formals)
   (argument-types
    closure-112
    (cons closure-211
          (cons closure-210 (cons closure-209 (cons closure-49 closure-53))))
    closure-16)
   (let ((v:+ (car the-formals))
         (v:* (car (cdr the-formals)))
         (lift-real*real->real (car (cdr (cdr the-formals))))
         (g:+ (car (cdr (cdr (cdr the-formals)))))
         (g:* (cdr (cdr (cdr (cdr the-formals))))))
     (operation-392 lift-real*real->real (closure-112-y the-closure))))
 (define (operation-208 the-closure the-formals)
   (argument-types closure-211 (cons real real) real)
   (let ((x (car the-formals)))
     (operation-236
      (make-closure-237 (closure-211-g:+ the-closure)
                        (closure-211-universal-zero? the-closure)
                        x)
      ())))
 (define (operation-393 the-closure the-formals)
   (argument-types (vector) closure-320 closure-226)
   (let ((kernel the-formals))
     (operation-222 (make-closure-224 kernel) (make-closure-224 kernel))))
 (define (operation-167 the-closure the-formals)
   (argument-types closure-166 () real)
   (let ()
     (operation-389
      (make-closure-390 (closure-166-f the-closure)
                        (closure-166-forward? the-closure)
                        (closure-166-operate-forward the-closure)
                        (closure-166-operate-reverse the-closure)
                        (closure-166-reverse? the-closure)
                        (closure-166-thing1 the-closure))
      (cons
       (operation-81 (closure-166-perturbation-of the-closure)
                     (closure-166-thing1 the-closure))
       (operation-30 (closure-166-perturbation-of the-closure) 1)))))
 (define (operation-331 the-closure the-formals)
   (argument-types closure-330 () real)
   (let ()
     (operation-395
      (make-closure-394 (closure-330-f the-closure)
                        (closure-330-thing1 the-closure)
                        (closure-330-thing2 the-closure))
      ())))
 (define (operation-240 the-closure the-formals)
   (argument-types closure-128 (cons closure-138 closure-137) closure-396)
   (let ((v:/ (car the-formals)) (g:/ (cdr the-formals)))
     (make-closure-396 (closure-128-g:* the-closure)
                       (closure-128-g:- the-closure)
                       g:/
                       (closure-128-lift-real*real->real the-closure)
                       v:/)))
 (define (operation-397 the-closure the-formals)
   (argument-types closure-399 closure-399 closure-268)
   (let ((recur the-formals))
     (operation-400 (closure-399-kernel the-closure)
                    (make-closure-398 recur))))
 (define (operation-327 the-closure the-formals)
   (argument-types closure-326 (vector) closure-59)
   (let ()
     (operation-56
      (vector)
      (operation-402
       (vector)
       (make-closure-401 (closure-326-f the-closure)
                         (closure-326-forward? the-closure)
                         (closure-326-g:* the-closure)
                         (closure-326-g:+ the-closure)
                         (closure-326-make-bundle the-closure)
                         (closure-326-new-tape-cell the-closure)
                         (closure-326-perturbation-of the-closure)
                         (closure-326-primal the-closure)
                         (closure-326-reverse? the-closure)
                         (closure-326-tangent the-closure))))))
 (define (operation-252 the-closure the-formals)
   (argument-types closure-205 (cons real real) real)
   (let ((args the-formals))
     (operation-274
      (operation-325
       (closure-205-lift-real*real->real the-closure)
       (cons (closure-205-v:- the-closure) (cons (vector) (vector))))
      args)))
 (define (operation-403 the-closure the-formals)
   (argument-types (vector) (cons closure-49 gensym) closure-404)
   (let ((f (car the-formals)) (i (cdr the-formals)))
     (make-closure-404 f i)))
 (define (operation-345 the-closure the-formals)
   (argument-types closure-344 () real)
   (let ()
     (operation-367
      (make-closure-368 (closure-344-x the-closure)
                        (closure-344-y the-closure))
      ())))
 (define (operation-405 the-closure the-formals)
   (argument-types closure-406 (vector) bool)
   (let ()
     (operation-408
      (make-closure-407 (closure-406-g:* the-closure)
                        (closure-406-g:+ the-closure)
                        (closure-406-g:- the-closure)
                        (closure-406-lift-real*real->boolean the-closure)
                        (closure-406-magnitude-squared the-closure))
      (operation-279
       (vector)
       (make-closure-283 (closure-406-g:* the-closure)
                         (closure-406-g:/ the-closure)
                         (closure-406-lift-real->real the-closure))))))
 (define (operation-409 the-closure the-formals)
   (argument-types closure-10 (cons real real) real)
   (let ((thing2 (cdr the-formals)))
     (operation-142
      (make-closure-143 (closure-10-f the-closure)
                        (closure-10-forward? the-closure)
                        (closure-10-g:* the-closure)
                        (closure-10-g:+ the-closure)
                        (closure-10-make-bundle the-closure)
                        (closure-10-new-tape-cell the-closure)
                        (closure-10-perturbation-of the-closure)
                        (closure-10-primal the-closure)
                        (closure-10-reverse? the-closure)
                        (closure-10-self the-closure)
                        (closure-10-tangent the-closure)
                        thing2)
      (make-closure-42 (closure-10-reverse? the-closure)))))
 (define (operation-273 the-closure the-formals)
   (argument-types closure-272 (vector) bool)
   (let ()
     (operation-411
      (make-closure-410 (closure-272-bundle? the-closure)
                        (closure-272-forward? the-closure)
                        (closure-272-least-gensym the-closure)
                        (closure-272-make-bundle the-closure)
                        (closure-272-make-tape-cell the-closure)
                        (closure-272-universal-zero? the-closure)
                        (closure-272-zero the-closure))
      (make-closure-173 (closure-272-tape-cell-tag the-closure)))))
 (define (operation-412 the-closure the-formals)
   (argument-types closure-413 (cons real real) bool)
   (let ((thing1 (car the-formals)))
     (let ((temp-415
            (cons (operation-414 (closure-413-primal* the-closure) thing1)
                  0)))
       (<= (car temp-415) 0))))
 (define (operation-416 the-closure the-formals)
   (argument-types closure-417 () real)
   (let ()
     (operation-306 (closure-417-lose the-closure) ())))
 (define (operation-418 the-closure the-formals)
   (argument-types closure-419 closure-31 bool)
   (let ((perturbation-of the-formals))
     (operation-422
      (make-closure-421 (closure-419-bundle? the-closure)
                        (closure-419-forward? the-closure)
                        (closure-419-make-bundle the-closure)
                        (closure-419-make-tape-cell the-closure)
                        perturbation-of
                        (closure-419-tape-cell? the-closure)
                        (closure-419-universal-zero? the-closure)
                        (closure-419-zero the-closure))
      (make-closure-420 (closure-419-tape-cell? the-closure)))))
 (define (operation-423 the-closure the-formals)
   (argument-types closure-424
                   (cons (cons real real) (cons real real))
                   (cons real real))
   (let ((z1 (car the-formals)) (z2 (cdr the-formals)))
     (cons
      (operation-48
       (closure-424-g:+ the-closure)
       (cons (operation-250 (vector) z1) (operation-250 (vector) z2)))
      (operation-48
       (closure-424-g:+ the-closure)
       (cons (operation-251 (vector) z1) (operation-251 (vector) z2))))))
 (define (operation-425 the-closure the-formals)
   (argument-types closure-426 closure-429 real)
   (let ((operate-reverse the-formals))
     (operation-428
      (make-closure-427 (closure-426-f the-closure)
                        (closure-426-forward? the-closure)
                        (closure-426-operate-forward the-closure)
                        operate-reverse
                        (closure-426-perturbation-of the-closure)
                        (closure-426-reverse? the-closure)
                        (closure-426-thing2 the-closure))
      ())))
 (define (operation-193 the-closure the-formals)
   (argument-types closure-192 (vector) bool)
   (let ()
     (operation-431 (make-closure-430 (closure-192-least-gensym the-closure))
                    (vector))))
 (define (operation-431 the-closure the-formals)
   (argument-types closure-430 (vector) bool)
   (let ()
     (operation-433 (make-closure-432 (closure-430-least-gensym the-closure))
                    (vector))))
 (define (operation-434 the-closure the-formals)
   (argument-types (vector) closure-437 closure-342)
   (let ((kernel the-formals))
     (operation-436 (make-closure-435 kernel) (make-closure-435 kernel))))
 (define (operation-379 the-closure the-formals)
   (argument-types (vector) closure-378 closure-377)
   (let ((kernel the-formals))
     (operation-439 (make-closure-438 kernel) (make-closure-438 kernel))))
 (define (operation-337 the-closure the-formals)
   (argument-types closure-210 (cons real real) real)
   (let ((obj2 (cdr the-formals)))
     (operation-72 (make-closure-73 (closure-210-g:* the-closure) obj2) ())))
 (define (operation-440 the-closure the-formals)
   (argument-types closure-441 closure-442 bool)
   (let ((lift-real*real->boolean the-formals))
     (operation-201
      (make-closure-202 (closure-441-g:* the-closure)
                        (closure-441-g:+ the-closure)
                        lift-real*real->boolean
                        (closure-441-lift-real*real->real the-closure)
                        (closure-441-lift-real->real the-closure)
                        (closure-441-magnitude-squared the-closure))
      (make-closure-205 (closure-441-lift-real*real->real the-closure)
                        (closure-441-v:- the-closure)))))
 (define (operation-443 the-closure the-formals)
   (argument-types closure-59 (cons real real) real)
   (let ((thing1 (car the-formals)))
     (operation-445
      (make-closure-444 (closure-59-f the-closure)
                        (closure-59-forward? the-closure)
                        (closure-59-g:* the-closure)
                        (closure-59-g:+ the-closure)
                        (closure-59-make-bundle the-closure)
                        (closure-59-new-tape-cell the-closure)
                        (closure-59-perturbation-of the-closure)
                        (closure-59-primal the-closure)
                        (closure-59-reverse? the-closure)
                        (closure-59-self the-closure)
                        (closure-59-tangent the-closure)
                        thing1)
      (make-closure-42 (closure-59-reverse? the-closure)))))
 (define (operation-5 the-closure the-formals)
   (argument-types
    (vector)
    (cons
     closure-105
     (cons closure-104 (cons closure-103 (cons closure-102 closure-101))))
    closure-49)
   (let ((v:+ (car the-formals))
         (v:* (car (cdr the-formals)))
         (lift-real*real->real (car (cdr (cdr the-formals))))
         (g:+ (car (cdr (cdr (cdr the-formals)))))
         (g:* (cdr (cdr (cdr (cdr the-formals))))))
     (make-closure-49 lift-real*real->real v:+)))
 (define (operation-4 the-closure the-formals)
   (argument-types
    (vector)
    (cons
     closure-105
     (cons closure-104 (cons closure-103 (cons closure-102 closure-101))))
    closure-53)
   (let ((v:+ (car the-formals))
         (v:* (car (cdr the-formals)))
         (lift-real*real->real (car (cdr (cdr the-formals))))
         (g:+ (car (cdr (cdr (cdr the-formals)))))
         (g:* (cdr (cdr (cdr (cdr the-formals))))))
     (make-closure-53 lift-real*real->real v:*)))
 (define (operation-446 the-closure the-formals)
   (argument-types closure-32 () gensym)
   (let ()
     (operation-169
      (closure-32-tape-cell? the-closure)
      (cons
       1
       (cons (vector)
             (make-closure-172 (closure-32-least-gensym the-closure)))))))
 (define (operation-146 the-closure the-formals)
   (argument-types closure-145 closure-144 real)
   (let ((operate-forward the-formals))
     (operation-425
      (make-closure-426 (closure-145-f the-closure)
                        (closure-145-forward? the-closure)
                        operate-forward
                        (closure-145-perturbation-of the-closure)
                        (closure-145-reverse? the-closure)
                        (closure-145-thing2 the-closure))
      (make-closure-429 (closure-145-new-tape-cell the-closure)
                        (closure-145-reverse-primal the-closure)
                        (closure-145-reverse? the-closure)
                        (closure-145-self the-closure)
                        (closure-145-thing2 the-closure)))))
 (define (operation-447 the-closure the-formals)
   (argument-types closure-448 () bool)
   (let ()
     (operation-287
      (vector)
      (cons
       (make-closure-288 (closure-448-bundle? the-closure)
                         (closure-448-make-bundle the-closure)
                         (closure-448-new-tape-cell the-closure)
                         (closure-448-tape-cell? the-closure)
                         (closure-448-zero the-closure))
       (cons
        (make-closure-12 (closure-448-universal-zero? the-closure))
        (cons
         (vector)
         (cons
          (make-closure-11 (closure-448-forward? the-closure)
                           (closure-448-make-bundle the-closure)
                           (closure-448-new-tape-cell the-closure)
                           (closure-448-perturbation-of the-closure)
                           (closure-448-primal the-closure)
                           (closure-448-reverse? the-closure)
                           (closure-448-tangent the-closure))
          (cons (vector) (vector)))))))))
 (define (operation-449 the-closure the-formals)
   (argument-types closure-35 () gensym)
   (let ()
     (operation-174
      (closure-35-tape-cell? the-closure)
      (cons
       -1
       (cons (vector)
             (make-closure-172 (closure-35-least-gensym the-closure)))))))
 (define (operation-400 the-closure the-formals)
   (argument-types closure-450 closure-398 closure-268)
   (let ((primal* the-formals))
     (make-closure-268 (closure-450-bundle? the-closure)
                       primal*
                       (closure-450-tape-cell? the-closure))))
 (define (operation-262 the-closure the-formals)
   (argument-types closure-261 () real)
   (let ()
     (operation-452
      (make-closure-451 (closure-261-eps1 the-closure)
                        (closure-261-eps2 the-closure)
                        (closure-261-f the-closure)
                        (closure-261-operate-reverse the-closure)
                        (closure-261-reverse? the-closure)
                        (closure-261-thing2 the-closure))
      ())))
 (define (operation-304 the-closure the-formals)
   (argument-types closure-303 closure-301 bool)
   (let ((magnitude-squared the-formals))
     (operation-454
      (make-closure-453 (closure-303-bundle? the-closure)
                        (closure-303-g:* the-closure)
                        (closure-303-g:+ the-closure)
                        (closure-303-lift-real*real->real the-closure)
                        magnitude-squared
                        (closure-303-make-bundle the-closure)
                        (closure-303-new-tape-cell the-closure)
                        (closure-303-tape-cell? the-closure)
                        (closure-303-v:- the-closure))
      (vector))))
 (define (operation-455 the-closure the-formals)
   (argument-types closure-456 (vector) bool)
   (let ()
     (operation-227
      (make-closure-228 (closure-456-bundle? the-closure)
                        (closure-456-forward? the-closure)
                        (closure-456-make-bundle the-closure)
                        (closure-456-new-tape-cell the-closure)
                        (closure-456-perturbation-of the-closure)
                        (closure-456-reverse? the-closure)
                        (closure-456-tape-cell? the-closure)
                        (closure-456-universal-zero? the-closure)
                        (closure-456-zero the-closure))
      (vector))))
 (define (operation-230 the-closure the-formals)
   (argument-types closure-229 (vector) bool)
   (let ()
     (operation-382
      (make-closure-383 (closure-229-bundle? the-closure)
                        (closure-229-forward? the-closure)
                        (closure-229-make-bundle the-closure)
                        (closure-229-new-tape-cell the-closure)
                        (closure-229-perturbation-of the-closure)
                        (closure-229-reverse? the-closure)
                        (closure-229-tape-cell? the-closure)
                        (closure-229-universal-zero? the-closure)
                        (closure-229-zero the-closure))
      (vector))))
 (define (operation-457 the-closure the-formals)
   (argument-types closure-173
                   (cons real (cons closure-461 closure-460))
                   real)
   (let ((thing (car the-formals)) (win (car (cdr the-formals)))
                                   (lose (cdr (cdr the-formals))))
     (operation-459 (make-closure-458 lose) ())))
 (define (operation-51 the-closure the-formals)
   (argument-types closure-16 (cons real real) real)
   (let ((thing1 (car the-formals)) (thing2 (cdr the-formals)))
     (operation-37
      (make-closure-38 (closure-16-f the-closure)
                       (closure-16-forward? the-closure)
                       (closure-16-g:* the-closure)
                       (closure-16-g:+ the-closure)
                       (closure-16-make-bundle the-closure)
                       (closure-16-new-tape-cell the-closure)
                       (closure-16-perturbation-of the-closure)
                       (closure-16-primal the-closure)
                       (closure-16-reverse? the-closure)
                       (closure-16-self the-closure)
                       (closure-16-tangent the-closure)
                       thing1
                       thing2)
      (make-closure-42 (closure-16-reverse? the-closure)))))
 (define (operation-55 the-closure the-formals)
   (argument-types closure-10 (cons real real) real)
   (let ((thing1 (car the-formals)) (thing2 (cdr the-formals)))
     (operation-43
      (make-closure-44 (closure-10-f the-closure)
                       (closure-10-forward? the-closure)
                       (closure-10-g:* the-closure)
                       (closure-10-g:+ the-closure)
                       (closure-10-make-bundle the-closure)
                       (closure-10-new-tape-cell the-closure)
                       (closure-10-perturbation-of the-closure)
                       (closure-10-primal the-closure)
                       (closure-10-reverse? the-closure)
                       (closure-10-self the-closure)
                       (closure-10-tangent the-closure)
                       thing1
                       thing2)
      (make-closure-42 (closure-10-reverse? the-closure)))))
 (define (operation-462 the-closure the-formals)
   (argument-types closure-464 closure-464 closure-59)
   (let ((recur the-formals))
     (operation-465 (closure-464-kernel the-closure)
                    (make-closure-463 recur))))
 (define (operation-452 the-closure the-formals)
   (argument-types closure-451 () real)
   (let ()
     (operation-467
      (make-closure-466 (closure-451-f the-closure)
                        (closure-451-thing2 the-closure))
      ())))
 (define (operation-388 the-closure the-formals)
   (argument-types (vector) closure-115 closure-115)
   (let ((self the-formals))
     (operation-113 (make-closure-114 self) ())))
 (define (operation-468 the-closure the-formals)
   (argument-types
    (vector)
    (cons
     closure-207
     (cons closure-12
           (cons (vector) (cons closure-11 (cons (vector) (vector))))))
    real)
   (let ((y the-formals))
     (operation-469 (vector) y)))
 (define (operation-470 the-closure the-formals)
   (argument-types (vector) closure-473 closure-10)
   (let ((kernel the-formals))
     (operation-472 (make-closure-471 kernel) (make-closure-471 kernel))))
 (define (operation-474 the-closure the-formals)
   (argument-types (vector) closure-477 closure-16)
   (let ((kernel the-formals))
     (operation-476 (make-closure-475 kernel) (make-closure-475 kernel))))
 (define (operation-23 the-closure the-formals)
   (argument-types closure-235 (cons real real) (cons real real))
   (let ((z the-formals))
     (operation-423
      (closure-235-c:+ the-closure)
      (cons (operation-249 (closure-235-c:* the-closure) (cons z z))
            (closure-235-c the-closure)))))
 (define (operation-478 the-closure the-formals)
   (argument-types closure-479 closure-480 real)
   (let ((operate-reverse the-formals))
     (operation-79
      (make-closure-80 (closure-479-f the-closure)
                       (closure-479-forward? the-closure)
                       (closure-479-operate-forward the-closure)
                       operate-reverse
                       (closure-479-perturbation-of the-closure)
                       (closure-479-reverse? the-closure)
                       (closure-479-thing1 the-closure)
                       (closure-479-thing2 the-closure))
      ())))
 (define (operation-481 the-closure the-formals)
   (argument-types closure-482 closure-483 real)
   (let ((operate-reverse the-formals))
     (operation-84
      (make-closure-85 (closure-482-f the-closure)
                       (closure-482-forward? the-closure)
                       (closure-482-operate-forward the-closure)
                       operate-reverse
                       (closure-482-perturbation-of the-closure)
                       (closure-482-reverse? the-closure)
                       (closure-482-thing1 the-closure)
                       (closure-482-thing2 the-closure))
      ())))
 (define (operation-484 the-closure the-formals)
   (argument-types closure-485 (vector) bool)
   (let ()
     (operation-487
      (make-closure-486 (closure-485-least-gensym the-closure)
                        (closure-485-make-bundle the-closure)
                        (closure-485-universal-zero? the-closure)
                        (closure-485-zero the-closure))
      (make-closure-149 (closure-485-bundle-tag the-closure)))))
 (define (operation-343 the-closure the-formals)
   (argument-types (vector) (vector) bool)
   (let ()
     (operation-191 (vector) (gensym))))
 (define (operation-488 the-closure the-formals)
   (argument-types closure-460 () real)
   (let ()
     (sqrt (closure-460-thing the-closure))))
 (define (operation-41 the-closure the-formals)
   (argument-types closure-40 closure-39 real)
   (let ((operate-forward the-formals))
     (operation-478
      (make-closure-479 (closure-40-f the-closure)
                        (closure-40-forward? the-closure)
                        operate-forward
                        (closure-40-perturbation-of the-closure)
                        (closure-40-reverse? the-closure)
                        (closure-40-thing1 the-closure)
                        (closure-40-thing2 the-closure))
      (make-closure-480 (closure-40-new-tape-cell the-closure)
                        (closure-40-reverse-primal the-closure)
                        (closure-40-reverse? the-closure)
                        (closure-40-self the-closure)
                        (closure-40-thing1 the-closure)
                        (closure-40-thing2 the-closure)))))
 (define (operation-47 the-closure the-formals)
   (argument-types closure-46 closure-45 real)
   (let ((operate-forward the-formals))
     (operation-481
      (make-closure-482 (closure-46-f the-closure)
                        (closure-46-forward? the-closure)
                        operate-forward
                        (closure-46-perturbation-of the-closure)
                        (closure-46-reverse? the-closure)
                        (closure-46-thing1 the-closure)
                        (closure-46-thing2 the-closure))
      (make-closure-483 (closure-46-new-tape-cell the-closure)
                        (closure-46-reverse-primal the-closure)
                        (closure-46-reverse? the-closure)
                        (closure-46-self the-closure)
                        (closure-46-thing1 the-closure)
                        (closure-46-thing2 the-closure)))))
 (define (operation-487 the-closure the-formals)
   (argument-types closure-486 closure-149 bool)
   (let ((bundle? the-formals))
     (operation-491
      (make-closure-490 bundle?
                        (closure-486-least-gensym the-closure)
                        (closure-486-make-bundle the-closure)
                        (closure-486-universal-zero? the-closure)
                        (closure-486-zero the-closure))
      (make-closure-489 bundle?))))
 (define (operation-492 the-closure the-formals)
   (argument-types closure-265 (cons (vector) closure-493) closure-115)
   (let ((df/dx (cdr the-formals)))
     (operation-386
      (make-closure-387 (closure-265-bundle? the-closure)
                        df/dx
                        (closure-265-g:* the-closure)
                        (closure-265-make-bundle the-closure)
                        (closure-265-new-tape-cell the-closure)
                        (closure-265-tape-cell? the-closure))
      (vector))))
 (define (operation-6 the-closure the-formals)
   (argument-types
    closure-11
    (cons
     closure-105
     (cons closure-104 (cons closure-103 (cons closure-102 closure-101))))
    closure-209)
   (let ((v:+ (car the-formals))
         (v:* (car (cdr the-formals)))
         (lift-real*real->real (car (cdr (cdr the-formals))))
         (g:+ (car (cdr (cdr (cdr the-formals)))))
         (g:* (cdr (cdr (cdr (cdr the-formals))))))
     (make-closure-209 (closure-11-forward? the-closure)
                       g:*
                       g:+
                       (closure-11-make-bundle the-closure)
                       (closure-11-new-tape-cell the-closure)
                       (closure-11-perturbation-of the-closure)
                       (closure-11-primal the-closure)
                       (closure-11-reverse? the-closure)
                       (closure-11-tangent the-closure))))
 (define (operation-234 the-closure the-formals)
   (argument-types closure-177 (cons real real) bool)
   (let ((args the-formals))
     (operation-412
      (operation-494 (closure-177-lift-real*real->boolean the-closure)
                     (vector))
      args)))
 (define (operation-495 the-closure the-formals)
   (argument-types closure-105 (cons real real) real)
   (let ((y the-formals))
     (operation-468
      (vector)
      (cons (make-closure-207 y) (closure-105-kernels the-closure)))))
 (define (operation-436 the-closure the-formals)
   (argument-types closure-435 closure-435 closure-342)
   (let ((recur the-formals))
     (operation-497 (closure-435-kernel the-closure)
                    (make-closure-496 recur))))
 (define (operation-439 the-closure the-formals)
   (argument-types closure-438 closure-438 closure-377)
   (let ((recur the-formals))
     (operation-499 (closure-438-kernel the-closure)
                    (make-closure-498 recur))))
 (define (operation-500 the-closure the-formals)
   (argument-types closure-501 (cons real real) bool)
   (let ((thing1 (car the-formals)))
     (let ((temp-502
            (cons (operation-414 (closure-501-primal* the-closure) thing1)
                  2)))
       (< (car temp-502) 2))))
 (define (operation-267 the-closure the-formals)
   (argument-types closure-266 closure-265 bool)
   (let ((lift-real->real the-formals))
     (operation-440
      (make-closure-441 (closure-266-g:* the-closure)
                        (closure-266-g:+ the-closure)
                        (closure-266-lift-real*real->real the-closure)
                        lift-real->real
                        (closure-266-magnitude-squared the-closure)
                        (closure-266-v:- the-closure))
      (make-closure-442 (closure-266-primal* the-closure)))))
 (define (operation-503 the-closure the-formals)
   (argument-types closure-355 (cons real real) real)
   (let ((z the-formals))
     (operation-504
      (closure-355-g:sqrt the-closure)
      (operation-48
       (closure-355-g:+ the-closure)
       (cons
        (operation-52
         (closure-355-g:* the-closure)
         (cons (operation-250 (vector) z) (operation-250 (vector) z)))
        (operation-52
         (closure-355-g:* the-closure)
         (cons (operation-251 (vector) z) (operation-251 (vector) z))))))))
 (define (operation-297 the-closure the-formals)
   (argument-types closure-210 (cons real real) real)
   (let ((obj1 (car the-formals)) (obj2 (cdr the-formals)))
     (operation-242 (make-closure-243 (closure-210-g:* the-closure) obj1 obj2)
                    ())))
 (define (operation-29 the-closure the-formals)
   (argument-types closure-28 () real)
   (let ()
     (operation-506
      (make-closure-505 (closure-28-f the-closure)
                        (closure-28-thing1 the-closure))
      ())))
 (define (operation-408 the-closure the-formals)
   (argument-types closure-407 closure-282 bool)
   (let ((g:sqrt the-formals))
     (operation-362
      (make-closure-363 (closure-407-g:* the-closure)
                        (closure-407-g:+ the-closure)
                        (closure-407-g:- the-closure)
                        g:sqrt
                        (closure-407-lift-real*real->boolean the-closure))
      (make-closure-364 g:sqrt (closure-407-magnitude-squared the-closure)))))
 (define (operation-507 the-closure the-formals)
   (argument-types closure-508 (vector) bool)
   (let ()
     (operation-510
      (make-closure-509 (closure-508-c:* the-closure)
                        (closure-508-c:+ the-closure)
                        (closure-508-c:0 the-closure)
                        (closure-508-g:< the-closure)
                        (closure-508-magnitude the-closure))
      (operation-393
       (vector)
       (make-closure-320 (closure-508-g:- the-closure)
                         (closure-508-g:<= the-closure))))))
 (define (operation-472 the-closure the-formals)
   (argument-types closure-471 closure-471 closure-10)
   (let ((recur the-formals))
     (operation-512 (closure-471-kernel the-closure)
                    (make-closure-511 recur))))
 (define (operation-476 the-closure the-formals)
   (argument-types closure-475 closure-475 closure-16)
   (let ((recur the-formals))
     (operation-514 (closure-475-kernel the-closure)
                    (make-closure-513 recur))))
 (define (operation-292 the-closure the-formals)
   (argument-types closure-291 () real)
   (let ()
     (operation-308 (closure-291-f the-closure)
                    (cons (closure-291-thing1 the-closure) 1))))
 (define (operation-391 the-closure the-formals)
   (argument-types closure-209
                   (cons closure-104 (cons (vector) (vector)))
                   closure-10)
   (let ((f (car the-formals)))
     (operation-516
      (make-closure-515 f
                        (closure-209-forward? the-closure)
                        (closure-209-g:* the-closure)
                        (closure-209-g:+ the-closure)
                        (closure-209-make-bundle the-closure)
                        (closure-209-new-tape-cell the-closure)
                        (closure-209-perturbation-of the-closure)
                        (closure-209-primal the-closure)
                        (closure-209-reverse? the-closure)
                        (closure-209-tangent the-closure))
      (vector))))
 (define (operation-392 the-closure the-formals)
   (argument-types closure-209
                   (cons closure-105 (cons (vector) (vector)))
                   closure-16)
   (let ((f (car the-formals)))
     (operation-518
      (make-closure-517 f
                        (closure-209-forward? the-closure)
                        (closure-209-g:* the-closure)
                        (closure-209-g:+ the-closure)
                        (closure-209-make-bundle the-closure)
                        (closure-209-new-tape-cell the-closure)
                        (closure-209-perturbation-of the-closure)
                        (closure-209-primal the-closure)
                        (closure-209-reverse? the-closure)
                        (closure-209-tangent the-closure))
      (vector))))
 (define (operation-244 the-closure the-formals)
   (argument-types
    closure-288
    (cons closure-211
          (cons closure-210 (cons closure-209 (cons closure-49 closure-53))))
    bool)
   (let ((v:+ (car the-formals))
         (v:* (car (cdr the-formals)))
         (lift-real*real->real (car (cdr (cdr the-formals))))
         (g:+ (car (cdr (cdr (cdr the-formals)))))
         (g:* (cdr (cdr (cdr (cdr the-formals))))))
     (operation-520
      (make-closure-519 (closure-288-bundle? the-closure)
                        g:*
                        g:+
                        lift-real*real->real
                        (closure-288-make-bundle the-closure)
                        (closure-288-new-tape-cell the-closure)
                        (closure-288-tape-cell? the-closure))
      (operation-403 (vector) (cons g:+ (closure-288-zero the-closure))))))
 (define (operation-54 the-closure the-formals)
   (argument-types closure-103
                   (cons closure-104 (cons (vector) (vector)))
                   closure-10)
   (let ((y the-formals))
     (operation-521
      (vector)
      (cons (make-closure-108 y) (closure-103-kernels the-closure)))))
 (define (operation-50 the-closure the-formals)
   (argument-types closure-103
                   (cons closure-105 (cons (vector) (vector)))
                   closure-16)
   (let ((y the-formals))
     (operation-522
      (vector)
      (cons (make-closure-112 y) (closure-103-kernels the-closure)))))
 (define (operation-523 the-closure the-formals)
   (argument-types closure-524 (vector) bool)
   (let ()
     (operation-447
      (make-closure-448 (closure-524-bundle? the-closure)
                        (closure-524-forward? the-closure)
                        (closure-524-make-bundle the-closure)
                        (closure-524-new-tape-cell the-closure)
                        (closure-524-perturbation-of the-closure)
                        (closure-524-primal the-closure)
                        (closure-524-reverse? the-closure)
                        (closure-524-tangent the-closure)
                        (closure-524-tape-cell? the-closure)
                        (closure-524-universal-zero? the-closure)
                        (closure-524-zero the-closure))
      ())))
 (define (operation-124 the-closure the-formals)
   (argument-types closure-123 () real)
   (let ()
     (operation-160
      (make-closure-161 (closure-123-f the-closure)
                        (closure-123-forward? the-closure)
                        (closure-123-operate-forward the-closure)
                        (closure-123-operate-reverse the-closure)
                        (closure-123-reverse? the-closure)
                        (closure-123-thing1 the-closure)
                        (closure-123-thing2 the-closure))
      (cons
       (operation-81 (closure-123-perturbation-of the-closure)
                     (closure-123-thing1 the-closure))
       (operation-81 (closure-123-perturbation-of the-closure)
                     (closure-123-thing2 the-closure))))))
 (define (operation-525 the-closure the-formals)
   (argument-types
    closure-526
    (cons
     closure-105
     (cons closure-104 (cons closure-103 (cons closure-102 closure-101))))
    real)
   (let ((recursive-variants the-formals))
     (operation-528
      (make-closure-527 recursive-variants (closure-526-z*-k the-closure))
      (closure-526-kernels the-closure))))
 (define (operation-529 the-closure the-formals)
   (argument-types closure-442 (vector) closure-501)
   (let ()
     (make-closure-501 (closure-442-primal* the-closure))))
 (define (operation-530 the-closure the-formals)
   (argument-types closure-531 () gensym)
   (let ()
     (operation-256
      (closure-531-tape-cell? the-closure)
      (cons
       (closure-531-thing the-closure)
       (cons (vector)
             (make-closure-172 (closure-531-least-gensym the-closure)))))))
 (define (operation-491 the-closure the-formals)
   (argument-types closure-490 closure-489 bool)
   (let ((forward? the-formals))
     (operation-194
      (make-closure-196 (closure-490-bundle? the-closure)
                        forward?
                        (closure-490-least-gensym the-closure)
                        (closure-490-make-bundle the-closure)
                        (closure-490-universal-zero? the-closure)
                        (closure-490-zero the-closure))
      (gensym))))
 (define (operation-532 the-closure the-formals)
   (argument-types closure-354 (cons real real) closure-235)
   (let ((c the-formals))
     (make-closure-235 c
                       (closure-354-c:* the-closure)
                       (closure-354-c:+ the-closure))))
 (define (operation-311 the-closure the-formals)
   (argument-types closure-352 (cons real real) bool)
   (let ((c the-formals))
     (operation-533
      (closure-352-g:< the-closure)
      (cons
       (operation-503
        (closure-352-magnitude the-closure)
        (operation-231
         (closure-352-iterate the-closure)
         (cons
          (real 100)
          (cons (operation-532 (closure-352-step the-closure) c)
                (closure-352-c:0 the-closure)))))
       2))))
 (define (operation-454 the-closure the-formals)
   (argument-types closure-453 (vector) bool)
   (let ()
     (operation-263
      (make-closure-264 (closure-453-bundle? the-closure)
                        (closure-453-g:* the-closure)
                        (closure-453-g:+ the-closure)
                        (closure-453-lift-real*real->real the-closure)
                        (closure-453-magnitude-squared the-closure)
                        (closure-453-make-bundle the-closure)
                        (closure-453-new-tape-cell the-closure)
                        (closure-453-tape-cell? the-closure)
                        (closure-453-v:- the-closure))
      (operation-534
       (vector)
       (make-closure-450 (closure-453-bundle? the-closure)
                         (closure-453-tape-cell? the-closure))))))
 (define (operation-535 the-closure the-formals)
   (argument-types closure-536 (vector) bool)
   (let ()
     (operation-60 (make-closure-61 (closure-536-least-gensym the-closure))
                   (vector))))
 (define (operation-534 the-closure the-formals)
   (argument-types (vector) closure-450 closure-268)
   (let ((kernel the-formals))
     (operation-397 (make-closure-399 kernel) (make-closure-399 kernel))))
 (define (operation-315 the-closure the-formals)
   (argument-types closure-314 () real)
   (let ()
     (operation-538
      (make-closure-537 (closure-314-eps1 the-closure)
                        (closure-314-eps2 the-closure)
                        (closure-314-f the-closure)
                        (closure-314-operate-reverse the-closure)
                        (closure-314-reverse? the-closure)
                        (closure-314-thing1 the-closure))
      ())))
 (define (operation-539 the-closure the-formals)
   (argument-types closure-540 closure-98 bool)
   (let ((v:- the-formals))
     (operation-300
      (make-closure-302 (closure-540-bundle? the-closure)
                        (closure-540-g:* the-closure)
                        (closure-540-g:+ the-closure)
                        (closure-540-lift-real*real->real the-closure)
                        (closure-540-make-bundle the-closure)
                        (closure-540-new-tape-cell the-closure)
                        (closure-540-tape-cell? the-closure)
                        v:-)
      (make-closure-305 (closure-540-g:* the-closure)
                        (closure-540-sum the-closure)))))
 (define (operation-465 the-closure the-formals)
   (argument-types closure-401 closure-463 closure-59)
   (let ((self the-formals))
     (make-closure-59 (closure-401-f the-closure)
                      (closure-401-forward? the-closure)
                      (closure-401-g:* the-closure)
                      (closure-401-g:+ the-closure)
                      (closure-401-make-bundle the-closure)
                      (closure-401-new-tape-cell the-closure)
                      (closure-401-perturbation-of the-closure)
                      (closure-401-primal the-closure)
                      (closure-401-reverse? the-closure)
                      self
                      (closure-401-tangent the-closure))))
 (define (operation-148 the-closure the-formals)
   (argument-types closure-147 () gensym)
   (let ()
     (operation-446 (closure-147-lose the-closure) ())))
 (define (operation-156 the-closure the-formals)
   (argument-types closure-155 () gensym)
   (let ()
     (operation-449 (closure-155-lose the-closure) ())))
 (define (operation-528 the-closure the-formals)
   (argument-types
    closure-527
    (cons closure-12
          (cons (vector) (cons closure-11 (cons (vector) (vector)))))
    real)
   (let ((v:+ (car the-formals))
         (lift-real*real->real (car (cdr (cdr the-formals)))))
     (operation-206
      (closure-527-z*-k the-closure)
      (cons
       (operation-8 v:+ (closure-527-recursive-variants the-closure))
       (cons
        (operation-7 (vector) (closure-527-recursive-variants the-closure))
        (cons
         (operation-6 lift-real*real->real
                      (closure-527-recursive-variants the-closure))
         (cons
          (operation-5 (vector) (closure-527-recursive-variants the-closure))
          (operation-4 (vector)
                       (closure-527-recursive-variants the-closure)))))))))
 (define (operation-385 the-closure the-formals)
   (argument-types closure-384 () bool)
   (let ()
     (operation-542
      (vector)
      (cons
       (make-closure-541 (closure-384-bundle? the-closure)
                         (closure-384-forward? the-closure)
                         (closure-384-make-bundle the-closure)
                         (closure-384-new-tape-cell the-closure)
                         (closure-384-perturbation-of the-closure)
                         (closure-384-reverse? the-closure)
                         (closure-384-tape-cell? the-closure)
                         (closure-384-universal-zero? the-closure)
                         (closure-384-zero the-closure))
       (cons (vector) (vector))))))
 (define (operation-24 the-closure the-formals)
   (argument-types closure-205 (cons real real) real)
   (let ((args the-formals))
     (operation-443
      (operation-325
       (closure-205-lift-real*real->real the-closure)
       (cons (closure-205-v:- the-closure) (cons (vector) (vector))))
      args)))
 (define (operation-133 the-closure the-formals)
   (argument-types closure-132 closure-132 closure-115)
   (let ((recur the-formals))
     (operation-544 (closure-132-kernel the-closure)
                    (make-closure-543 recur))))
 (define (operation-81 the-closure the-formals)
   (argument-types closure-31 real gensym)
   (let ((thing the-formals))
     (operation-545
      (closure-31-bundle? the-closure)
      (cons
       thing
       (cons
        (vector)
        (make-closure-531 (closure-31-least-gensym the-closure)
                          (closure-31-tape-cell? the-closure)
                          thing))))))
 (define (operation-241 the-closure the-formals)
   (argument-types closure-129 (cons closure-136 closure-396) bool)
   (let ((v:/ (car the-formals)) (g:/ (cdr the-formals)))
     (operation-405
      (make-closure-406 (closure-129-g:* the-closure)
                        (closure-129-g:+ the-closure)
                        (closure-129-g:- the-closure)
                        g:/
                        (closure-129-lift-real*real->boolean the-closure)
                        (closure-129-lift-real->real the-closure)
                        (closure-129-magnitude-squared the-closure))
      (vector))))
 (define (operation-359 the-closure the-formals)
   (argument-types
    (vector)
    (cons
     closure-294
     (cons closure-12
           (cons (vector) (cons closure-11 (cons (vector) (vector))))))
    real)
   (let ((y the-formals))
     (operation-546 (vector) y)))
 (define (operation-361 the-closure the-formals)
   (argument-types
    (vector)
    (cons
     closure-296
     (cons closure-12
           (cons (vector) (cons closure-11 (cons (vector) (vector))))))
    real)
   (let ((y the-formals))
     (operation-547 (vector) y)))
 (define (operation-251 the-closure the-formals)
   (argument-types (vector) (cons real real) real)
   (let ((x (car the-formals)) (y (cdr the-formals)))
     y))
 (define (operation-250 the-closure the-formals)
   (argument-types (vector) (cons real real) real)
   (let ((x (car the-formals)) (y (cdr the-formals)))
     x))
 (define (operation-497 the-closure the-formals)
   (argument-types closure-437 closure-496 closure-342)
   (let ((primal the-formals))
     (make-closure-342 (closure-437-bundle? the-closure)
                       (closure-437-make-bundle the-closure)
                       primal
                       (closure-437-reverse? the-closure))))
 (define (operation-499 the-closure the-formals)
   (argument-types closure-378 closure-498 closure-377)
   (let ((tangent the-formals))
     (make-closure-377 (closure-378-bundle? the-closure)
                       (closure-378-make-bundle the-closure)
                       (closure-378-reverse? the-closure)
                       tangent)))
 (define (operation-548 the-closure the-formals)
   (argument-types closure-549 () real)
   (let ()
     (operation-551
      (closure-549-tape-cell? the-closure)
      (cons
       (closure-549-thing the-closure)
       (cons (make-closure-550 (closure-549-primal* the-closure))
             (make-closure-307 (closure-549-thing the-closure)))))))
 (define (operation-552 the-closure the-formals)
   (argument-types closure-553 closure-557 real)
   (let ((operate-forward the-formals))
     (operation-556
      (make-closure-555 (closure-553-f the-closure)
                        (closure-553-forward? the-closure)
                        operate-forward
                        (closure-553-perturbation-of the-closure)
                        (closure-553-reverse? the-closure)
                        (closure-553-thing1 the-closure))
      (make-closure-554 (closure-553-new-tape-cell the-closure)
                        (closure-553-reverse-primal the-closure)
                        (closure-553-reverse? the-closure)
                        (closure-553-self the-closure)
                        (closure-553-thing1 the-closure)))))
 (define (operation-119 the-closure the-formals)
   (argument-types closure-118 gensym bool)
   (let ((bundle-tag the-formals))
     (operation-370
      (make-closure-371 bundle-tag
                        (closure-118-least-gensym the-closure)
                        (closure-118-universal-zero? the-closure)
                        (closure-118-zero the-closure))
      (make-closure-372 bundle-tag))))
 (define (operation-538 the-closure the-formals)
   (argument-types closure-537 () real)
   (let ()
     (operation-289
      (make-closure-290 (closure-537-f the-closure)
                        (closure-537-thing1 the-closure))
      ())))
 (define (operation-558 the-closure the-formals)
   (argument-types closure-559 closure-424 bool)
   (let ((c:+ the-formals))
     (operation-92
      (make-closure-93 c:+
                       (closure-559-g:* the-closure)
                       (closure-559-g:+ the-closure)
                       (closure-559-g:- the-closure)
                       (closure-559-g:< the-closure)
                       (closure-559-g:<= the-closure)
                       (closure-559-g:sqrt the-closure))
      (make-closure-96 (closure-559-g:* the-closure)
                       (closure-559-g:+ the-closure)
                       (closure-559-g:- the-closure)))))
 (define (operation-469 the-closure the-formals)
   (argument-types
    (vector)
    (cons
     closure-207
     (cons closure-12
           (cons (vector) (cons closure-11 (cons (vector) (vector))))))
    real)
   (let ((z*-k (car the-formals)) (kernels (cdr the-formals)))
     (operation-525
      (make-closure-526 kernels z*-k)
      (cons
       (make-closure-105 kernels)
       (cons
        (make-closure-104 kernels)
        (cons
         (make-closure-103 kernels)
         (cons (make-closure-102 kernels) (make-closure-101 kernels))))))))
 (define (operation-551 the-closure the-formals)
   (argument-types closure-173
                   (cons real (cons closure-550 closure-307))
                   real)
   (let ((thing (car the-formals)) (win (car (cdr the-formals)))
                                   (lose (cdr (cdr the-formals))))
     (operation-416 (make-closure-417 lose) ())))
 (define (operation-512 the-closure the-formals)
   (argument-types closure-473 closure-511 closure-10)
   (let ((self the-formals))
     (make-closure-10 (closure-473-f the-closure)
                      (closure-473-forward? the-closure)
                      (closure-473-g:* the-closure)
                      (closure-473-g:+ the-closure)
                      (closure-473-make-bundle the-closure)
                      (closure-473-new-tape-cell the-closure)
                      (closure-473-perturbation-of the-closure)
                      (closure-473-primal the-closure)
                      (closure-473-reverse? the-closure)
                      self
                      (closure-473-tangent the-closure))))
 (define (operation-514 the-closure the-formals)
   (argument-types closure-477 closure-513 closure-16)
   (let ((self the-formals))
     (make-closure-16 (closure-477-f the-closure)
                      (closure-477-forward? the-closure)
                      (closure-477-g:* the-closure)
                      (closure-477-g:+ the-closure)
                      (closure-477-make-bundle the-closure)
                      (closure-477-new-tape-cell the-closure)
                      (closure-477-perturbation-of the-closure)
                      (closure-477-primal the-closure)
                      (closure-477-reverse? the-closure)
                      self
                      (closure-477-tangent the-closure))))
 (define (operation-459 the-closure the-formals)
   (argument-types closure-458 () real)
   (let ()
     (operation-488 (closure-458-lose the-closure) ())))
 (define (operation-255 the-closure the-formals)
   (argument-types
    (vector)
    (cons
     closure-254
     (cons closure-12
           (cons (vector) (cons closure-11 (cons (vector) (vector))))))
    real)
   (let ((y the-formals))
     (operation-560 (vector) y)))
 (define (operation-494 the-closure the-formals)
   (argument-types closure-442 (vector) closure-413)
   (let ()
     (make-closure-413 (closure-442-primal* the-closure))))
 (define (operation-411 the-closure the-formals)
   (argument-types closure-410 closure-173 bool)
   (let ((tape-cell? the-formals))
     (operation-418
      (make-closure-419 (closure-410-bundle? the-closure)
                        (closure-410-forward? the-closure)
                        (closure-410-make-bundle the-closure)
                        (closure-410-make-tape-cell the-closure)
                        tape-cell?
                        (closure-410-universal-zero? the-closure)
                        (closure-410-zero the-closure))
      (make-closure-31 (closure-410-bundle? the-closure)
                       (closure-410-least-gensym the-closure)
                       tape-cell?))))
 (define (operation-422 the-closure the-formals)
   (argument-types closure-421 closure-420 bool)
   (let ((reverse? the-formals))
     (operation-563
      (make-closure-562 (closure-421-bundle? the-closure)
                        (closure-421-forward? the-closure)
                        (closure-421-make-bundle the-closure)
                        (closure-421-perturbation-of the-closure)
                        reverse?
                        (closure-421-tape-cell? the-closure)
                        (closure-421-universal-zero? the-closure)
                        (closure-421-zero the-closure))
      (make-closure-561 (closure-421-make-tape-cell the-closure)))))
 (define (operation-333 the-closure the-formals)
   (argument-types closure-332 () real)
   (let ()
     (operation-565
      (make-closure-564 (closure-332-f the-closure)
                        (closure-332-thing1 the-closure)
                        (closure-332-thing2 the-closure))
      ())))
 (define (operation-335 the-closure the-formals)
   (argument-types closure-334 () real)
   (let ()
     (operation-567
      (make-closure-566 (closure-334-f the-closure)
                        (closure-334-thing1 the-closure)
                        (closure-334-thing2 the-closure))
      ())))
 (define (operation-506 the-closure the-formals)
   (argument-types closure-505 () real)
   (let ()
     (operation-495 (closure-505-f the-closure)
                    (cons (closure-505-thing1 the-closure) -1))))
 (define (operation-516 the-closure the-formals)
   (argument-types closure-515 (vector) closure-10)
   (let ()
     (operation-181
      (vector)
      (operation-470
       (vector)
       (make-closure-473 (closure-515-f the-closure)
                         (closure-515-forward? the-closure)
                         (closure-515-g:* the-closure)
                         (closure-515-g:+ the-closure)
                         (closure-515-make-bundle the-closure)
                         (closure-515-new-tape-cell the-closure)
                         (closure-515-perturbation-of the-closure)
                         (closure-515-primal the-closure)
                         (closure-515-reverse? the-closure)
                         (closure-515-tangent the-closure))))))
 (define (operation-518 the-closure the-formals)
   (argument-types closure-517 (vector) closure-16)
   (let ()
     (operation-184
      (vector)
      (operation-474
       (vector)
       (make-closure-477 (closure-517-f the-closure)
                         (closure-517-forward? the-closure)
                         (closure-517-g:* the-closure)
                         (closure-517-g:+ the-closure)
                         (closure-517-make-bundle the-closure)
                         (closure-517-new-tape-cell the-closure)
                         (closure-517-perturbation-of the-closure)
                         (closure-517-primal the-closure)
                         (closure-517-reverse? the-closure)
                         (closure-517-tangent the-closure))))))
 (define (operation-248 the-closure the-formals)
   (argument-types closure-247 (vector) bool)
   (let ()
     (operation-535 (make-closure-536 (closure-247-least-gensym the-closure))
                    (vector))))
 (define (operation-568 the-closure the-formals)
   (argument-types (vector) (vector) bool)
   (let ()
     (operation-257 (vector) (vector))))
 (define (operation-563 the-closure the-formals)
   (argument-types closure-562 closure-561 bool)
   (let ((new-tape-cell the-formals))
     (operation-455
      (make-closure-456 (closure-562-bundle? the-closure)
                        (closure-562-forward? the-closure)
                        (closure-562-make-bundle the-closure)
                        new-tape-cell
                        (closure-562-perturbation-of the-closure)
                        (closure-562-reverse? the-closure)
                        (closure-562-tape-cell? the-closure)
                        (closure-562-universal-zero? the-closure)
                        (closure-562-zero the-closure))
      (vector))))
 (define (operation-395 the-closure the-formals)
   (argument-types closure-394 () real)
   (let ()
     (operation-97
      (closure-394-f the-closure)
      (cons (closure-394-thing1 the-closure)
            (closure-394-thing2 the-closure)))))
 (define (operation-533 the-closure the-formals)
   (argument-types closure-180 (cons real real) bool)
   (let ((args the-formals))
     (operation-500
      (operation-529 (closure-180-lift-real*real->boolean the-closure)
                     (vector))
      args)))
 (define (operation-569 the-closure the-formals)
   (argument-types closure-570 closure-571 real)
   (let ((operate-forward the-formals))
     (operation-121
      (make-closure-122 (closure-570-f the-closure)
                        (closure-570-forward? the-closure)
                        operate-forward
                        (closure-570-perturbation-of the-closure)
                        (closure-570-reverse? the-closure)
                        (closure-570-thing1 the-closure)
                        (closure-570-thing2 the-closure))
      (make-closure-125 (closure-570-new-tape-cell the-closure)
                        (closure-570-reverse-primal the-closure)
                        (closure-570-reverse? the-closure)
                        (closure-570-self the-closure)
                        (closure-570-thing1 the-closure)
                        (closure-570-thing2 the-closure)))))
 (define (operation-572 the-closure the-formals)
   (argument-types
    closure-573
    (cons
     closure-105
     (cons closure-104 (cons closure-103 (cons closure-102 closure-101))))
    real)
   (let ((recursive-variants the-formals))
     (operation-575
      (make-closure-574 recursive-variants (closure-573-z*-k the-closure))
      (closure-573-kernels the-closure))))
 (define (operation-576 the-closure the-formals)
   (argument-types
    closure-577
    (cons
     closure-105
     (cons closure-104 (cons closure-103 (cons closure-102 closure-101))))
    real)
   (let ((recursive-variants the-formals))
     (operation-579
      (make-closure-578 recursive-variants (closure-577-z*-k the-closure))
      (closure-577-kernels the-closure))))
 (define (operation-445 the-closure the-formals)
   (argument-types closure-444 closure-42 real)
   (let ((reverse-primal the-formals))
     (operation-582
      (make-closure-581 (closure-444-f the-closure)
                        (closure-444-forward? the-closure)
                        (closure-444-new-tape-cell the-closure)
                        (closure-444-perturbation-of the-closure)
                        reverse-primal
                        (closure-444-reverse? the-closure)
                        (closure-444-self the-closure)
                        (closure-444-thing1 the-closure))
      (make-closure-580 (closure-444-g:* the-closure)
                        (closure-444-g:+ the-closure)
                        (closure-444-make-bundle the-closure)
                        (closure-444-primal the-closure)
                        (closure-444-self the-closure)
                        (closure-444-tangent the-closure)
                        (closure-444-thing1 the-closure)))))
 (define (operation-544 the-closure the-formals)
   (argument-types closure-134 closure-543 closure-115)
   (let ((self the-formals))
     (make-closure-115 (closure-134-bundle? the-closure)
                       (closure-134-df/dx the-closure)
                       (closure-134-g:* the-closure)
                       (closure-134-make-bundle the-closure)
                       (closure-134-new-tape-cell the-closure)
                       self
                       (closure-134-tape-cell? the-closure))))
 (define (operation-542 the-closure the-formals)
   (argument-types (vector) (cons closure-541 (cons (vector) (vector))) bool)
   (let ((z*-k (car the-formals)))
     (operation-380 (make-closure-381 z*-k) (cons (vector) (vector)))))
 (define (operation-583 the-closure the-formals)
   (argument-types closure-584 (vector) bool)
   (let ()
     (operation-338
      (make-closure-339 (closure-584-bundle? the-closure)
                        (closure-584-forward? the-closure)
                        (closure-584-make-bundle the-closure)
                        (closure-584-new-tape-cell the-closure)
                        (closure-584-perturbation-of the-closure)
                        (closure-584-reverse? the-closure)
                        (closure-584-tape-cell? the-closure)
                        (closure-584-universal-zero? the-closure)
                        (closure-584-zero the-closure))
      (operation-434
       (vector)
       (make-closure-437 (closure-584-bundle? the-closure)
                         (closure-584-make-bundle the-closure)
                         (closure-584-reverse? the-closure))))))
 (define (operation-467 the-closure the-formals)
   (argument-types closure-466 () real)
   (let ()
     (operation-586
      (make-closure-585 (closure-466-f the-closure)
                        (closure-466-thing2 the-closure))
      ())))
 (define (operation-63 the-closure the-formals)
   (argument-types closure-62 (vector) bool)
   (let ()
     (operation-365 (make-closure-366 (closure-62-least-gensym the-closure))
                    (gensym))))
 (define (operation-587 the-closure the-formals)
   (argument-types closure-149
                   (cons real (cons closure-589 closure-588))
                   real)
   (let ((thing (car the-formals)) (win (car (cdr the-formals)))
                                   (lose (cdr (cdr the-formals))))
     (operation-139 (make-closure-140 lose) ())))
 (define (operation-590 the-closure the-formals)
   (argument-types closure-591 () gensym)
   (let ()
     (operation-530 (closure-591-lose the-closure) ())))
 (define (operation-575 the-closure the-formals)
   (argument-types
    closure-574
    (cons closure-12
          (cons (vector) (cons closure-11 (cons (vector) (vector)))))
    real)
   (let ((v:+ (car the-formals))
         (lift-real*real->real (car (cdr (cdr the-formals)))))
     (operation-293
      (closure-574-z*-k the-closure)
      (cons
       (operation-8 v:+ (closure-574-recursive-variants the-closure))
       (cons
        (operation-7 (vector) (closure-574-recursive-variants the-closure))
        (cons
         (operation-6 lift-real*real->real
                      (closure-574-recursive-variants the-closure))
         (cons
          (operation-5 (vector) (closure-574-recursive-variants the-closure))
          (operation-4 (vector)
                       (closure-574-recursive-variants the-closure)))))))))
 (define (operation-579 the-closure the-formals)
   (argument-types
    closure-578
    (cons closure-12
          (cons (vector) (cons closure-11 (cons (vector) (vector)))))
    real)
   (let ((v:+ (car the-formals))
         (lift-real*real->real (car (cdr (cdr the-formals)))))
     (operation-295
      (closure-578-z*-k the-closure)
      (cons
       (operation-8 v:+ (closure-578-recursive-variants the-closure))
       (cons
        (operation-7 (vector) (closure-578-recursive-variants the-closure))
        (cons
         (operation-6 lift-real*real->real
                      (closure-578-recursive-variants the-closure))
         (cons
          (operation-5 (vector) (closure-578-recursive-variants the-closure))
          (operation-4 (vector)
                       (closure-578-recursive-variants the-closure)))))))))
 (define (operation-376 the-closure the-formals)
   (argument-types closure-375 (vector) bool)
   (let ()
     (operation-523
      (make-closure-524 (closure-375-bundle? the-closure)
                        (closure-375-forward? the-closure)
                        (closure-375-make-bundle the-closure)
                        (closure-375-new-tape-cell the-closure)
                        (closure-375-perturbation-of the-closure)
                        (closure-375-primal the-closure)
                        (closure-375-reverse? the-closure)
                        (closure-375-tangent the-closure)
                        (closure-375-tape-cell? the-closure)
                        (closure-375-universal-zero? the-closure)
                        (closure-375-zero the-closure))
      (vector))))
 (define (operation-152 the-closure the-formals)
   (argument-types closure-541 (cons (vector) (vector)) bool)
   (let ()
     (operation-583
      (make-closure-584 (closure-541-bundle? the-closure)
                        (closure-541-forward? the-closure)
                        (closure-541-make-bundle the-closure)
                        (closure-541-new-tape-cell the-closure)
                        (closure-541-perturbation-of the-closure)
                        (closure-541-reverse? the-closure)
                        (closure-541-tape-cell? the-closure)
                        (closure-541-universal-zero? the-closure)
                        (closure-541-zero the-closure))
      (vector))))
 (define (operation-278 the-closure the-formals)
   (argument-types closure-16 (cons real real) real)
   (let ((thing1 (car the-formals)))
     (operation-593
      (make-closure-592 (closure-16-f the-closure)
                        (closure-16-forward? the-closure)
                        (closure-16-g:* the-closure)
                        (closure-16-g:+ the-closure)
                        (closure-16-make-bundle the-closure)
                        (closure-16-new-tape-cell the-closure)
                        (closure-16-perturbation-of the-closure)
                        (closure-16-primal the-closure)
                        (closure-16-reverse? the-closure)
                        (closure-16-self the-closure)
                        (closure-16-tangent the-closure)
                        thing1)
      (make-closure-42 (closure-16-reverse? the-closure)))))
 (define (operation-594 the-closure the-formals)
   (argument-types closure-115 real real)
   (let ((thing the-formals))
     (operation-587
      (closure-115-bundle? the-closure)
      (cons
       thing
       (cons
        (make-closure-589 (closure-115-df/dx the-closure)
                          (closure-115-g:* the-closure)
                          (closure-115-make-bundle the-closure)
                          (closure-115-self the-closure))
        (make-closure-588 (closure-115-df/dx the-closure)
                          (closure-115-new-tape-cell the-closure)
                          (closure-115-self the-closure)
                          (closure-115-tape-cell? the-closure)
                          thing))))))
 (define (operation-595 the-closure the-formals)
   (argument-types
    closure-596
    (cons
     closure-105
     (cons closure-104 (cons closure-103 (cons closure-102 closure-101))))
    real)
   (let ((recursive-variants the-formals))
     (operation-598
      (make-closure-597 recursive-variants (closure-596-z*-k the-closure))
      (closure-596-kernels the-closure))))
 (define (operation-593 the-closure the-formals)
   (argument-types closure-592 closure-42 real)
   (let ((reverse-primal the-formals))
     (operation-552
      (make-closure-553 (closure-592-f the-closure)
                        (closure-592-forward? the-closure)
                        (closure-592-new-tape-cell the-closure)
                        (closure-592-perturbation-of the-closure)
                        reverse-primal
                        (closure-592-reverse? the-closure)
                        (closure-592-self the-closure)
                        (closure-592-thing1 the-closure))
      (make-closure-557 (closure-592-g:* the-closure)
                        (closure-592-g:+ the-closure)
                        (closure-592-make-bundle the-closure)
                        (closure-592-primal the-closure)
                        (closure-592-self the-closure)
                        (closure-592-tangent the-closure)
                        (closure-592-thing1 the-closure)))))
 (define (operation-99 the-closure the-formals)
   (argument-types closure-53 (cons real real) real)
   (let ((args the-formals))
     (operation-409
      (operation-54
       (closure-53-lift-real*real->real the-closure)
       (cons (closure-53-v:* the-closure) (cons (vector) (vector))))
      args)))
 (define (operation-521 the-closure the-formals)
   (argument-types
    (vector)
    (cons
     closure-108
     (cons closure-12
           (cons (vector) (cons closure-11 (cons (vector) (vector))))))
    closure-10)
   (let ((y the-formals))
     (operation-100 (vector) y)))
 (define (operation-522 the-closure the-formals)
   (argument-types
    (vector)
    (cons
     closure-112
     (cons closure-12
           (cons (vector) (cons closure-11 (cons (vector) (vector))))))
    closure-16)
   (let ((y the-formals))
     (operation-109 (vector) y)))
 (define (operation-510 the-closure the-formals)
   (argument-types closure-509 closure-226 bool)
   (let ((iterate the-formals))
     (operation-350
      (make-closure-351 (closure-509-c:0 the-closure)
                        (closure-509-g:< the-closure)
                        iterate
                        (closure-509-magnitude the-closure))
      (make-closure-354 (closure-509-c:* the-closure)
                        (closure-509-c:+ the-closure)))))
 (define (operation-357 the-closure the-formals)
   (argument-types closure-356 closure-355 bool)
   (let ((magnitude the-formals))
     (operation-507
      (make-closure-508 (closure-356-c:* the-closure)
                        (closure-356-c:+ the-closure)
                        (closure-356-c:0 the-closure)
                        (closure-356-g:- the-closure)
                        (closure-356-g:< the-closure)
                        (closure-356-g:<= the-closure)
                        magnitude)
      (vector))))
 (define (operation-20 the-closure the-formals)
   (argument-types closure-19 () real)
   (let ()
     (operation-220
      (make-closure-221 (closure-19-eps1 the-closure)
                        (closure-19-eps2 the-closure)
                        (closure-19-f the-closure)
                        (closure-19-forward? the-closure)
                        (closure-19-operate-forward the-closure)
                        (closure-19-operate-reverse the-closure)
                        (closure-19-reverse? the-closure)
                        (closure-19-thing1 the-closure))
      ())))
 (define (operation-141 the-closure the-formals)
   (argument-types closure-588 () real)
   (let ()
     (operation-457
      (closure-588-tape-cell? the-closure)
      (cons
       (closure-588-thing the-closure)
       (cons
        (make-closure-461 (closure-588-df/dx the-closure)
                          (closure-588-new-tape-cell the-closure)
                          (closure-588-self the-closure)
                          (closure-588-thing the-closure))
        (make-closure-460 (closure-588-thing the-closure)))))))
 (define (operation-402 the-closure the-formals)
   (argument-types (vector) closure-401 closure-59)
   (let ((kernel the-formals))
     (operation-462 (make-closure-464 kernel) (make-closure-464 kernel))))
 (define (operation-433 the-closure the-formals)
   (argument-types closure-432 (vector) bool)
   (let ()
     (operation-245 (make-closure-246 (closure-432-least-gensym the-closure))
                    (vector))))
 (define (operation-504 the-closure the-formals)
   (argument-types closure-282 real real)
   (let ((args the-formals))
     (operation-594
      (operation-492
       (closure-282-lift-real->real the-closure)
       (cons
        (vector)
        (make-closure-493 (closure-282-g:* the-closure)
                          (closure-282-g:/ the-closure)
                          (closure-282-g:sqrt the-closure))))
      args)))
 (define (operation-598 the-closure the-formals)
   (argument-types
    closure-597
    (cons closure-12
          (cons (vector) (cons closure-11 (cons (vector) (vector)))))
    real)
   (let ((v:+ (car the-formals))
         (lift-real*real->real (car (cdr (cdr the-formals)))))
     (operation-336
      (closure-597-z*-k the-closure)
      (cons
       (operation-8 v:+ (closure-597-recursive-variants the-closure))
       (cons
        (operation-7 (vector) (closure-597-recursive-variants the-closure))
        (cons
         (operation-6 lift-real*real->real
                      (closure-597-recursive-variants the-closure))
         (cons
          (operation-5 (vector) (closure-597-recursive-variants the-closure))
          (operation-4 (vector)
                       (closure-597-recursive-variants the-closure)))))))))
 (define (operation-546 the-closure the-formals)
   (argument-types
    (vector)
    (cons
     closure-294
     (cons closure-12
           (cons (vector) (cons closure-11 (cons (vector) (vector))))))
    real)
   (let ((z*-k (car the-formals)) (kernels (cdr the-formals)))
     (operation-572
      (make-closure-573 kernels z*-k)
      (cons
       (make-closure-105 kernels)
       (cons
        (make-closure-104 kernels)
        (cons
         (make-closure-103 kernels)
         (cons (make-closure-102 kernels) (make-closure-101 kernels))))))))
 (define (operation-547 the-closure the-formals)
   (argument-types
    (vector)
    (cons
     closure-296
     (cons closure-12
           (cons (vector) (cons closure-11 (cons (vector) (vector))))))
    real)
   (let ((z*-k (car the-formals)) (kernels (cdr the-formals)))
     (operation-576
      (make-closure-577 kernels z*-k)
      (cons
       (make-closure-105 kernels)
       (cons
        (make-closure-104 kernels)
        (cons
         (make-closure-103 kernels)
         (cons (make-closure-102 kernels) (make-closure-101 kernels))))))))
 (define (operation-599 the-closure the-formals)
   (argument-types closure-600 () real)
   (let ()
     (operation-548 (closure-600-lose the-closure) ())))
 (define (operation-200 the-closure the-formals)
   (argument-types closure-199 (vector) bool)
   (let ()
     (operation-88
      (make-closure-89 (closure-199-bundle? the-closure)
                       (closure-199-forward? the-closure)
                       (closure-199-least-gensym the-closure)
                       (closure-199-make-bundle the-closure)
                       (closure-199-make-tape-cell the-closure)
                       (closure-199-tape-cell-tag the-closure)
                       (closure-199-universal-zero? the-closure)
                       (closure-199-zero the-closure))
      (vector))))
 (define (operation-565 the-closure the-formals)
   (argument-types closure-564 () real)
   (let ()
     (operation-358
      (closure-564-f the-closure)
      (cons (closure-564-thing1 the-closure)
            (closure-564-thing2 the-closure)))))
 (define (operation-567 the-closure the-formals)
   (argument-types closure-566 () real)
   (let ()
     (operation-360
      (closure-566-f the-closure)
      (cons (closure-566-thing1 the-closure)
            (closure-566-thing2 the-closure)))))
 (define (operation-601 the-closure the-formals)
   (argument-types closure-602 () bool)
   (let ()
     (operation-558
      (make-closure-559 (closure-602-g:* the-closure)
                        (closure-602-g:+ the-closure)
                        (closure-602-g:- the-closure)
                        (closure-602-g:< the-closure)
                        (closure-602-g:<= the-closure)
                        (closure-602-g:sqrt the-closure))
      (make-closure-424 (closure-602-g:+ the-closure)))))
 (define (operation-285 the-closure the-formals)
   (argument-types closure-284 () bool)
   (let ()
     (operation-601
      (make-closure-602 (closure-284-g:* the-closure)
                        (closure-284-g:+ the-closure)
                        (closure-284-g:- the-closure)
                        (closure-284-g:< the-closure)
                        (closure-284-g:<= the-closure)
                        (closure-284-g:sqrt the-closure))
      ())))
 (define (operation-545 the-closure the-formals)
   (argument-types closure-149 (cons real (cons (vector) closure-531)) gensym)
   (let ((thing (car the-formals)) (lose (cdr (cdr the-formals))))
     (operation-590 (make-closure-591 lose) ())))
 (define (operation-319 the-closure the-formals)
   (argument-types closure-318 (vector) bool)
   (let ()
     (operation-484
      (make-closure-485 (closure-318-bundle-tag the-closure)
                        (closure-318-least-gensym the-closure)
                        (closure-318-make-bundle the-closure)
                        (closure-318-universal-zero? the-closure)
                        (closure-318-zero the-closure))
      (vector))))
 (define (operation-582 the-closure the-formals)
   (argument-types closure-581 closure-580 real)
   (let ((operate-forward the-formals))
     (operation-164
      (make-closure-165 (closure-581-f the-closure)
                        (closure-581-forward? the-closure)
                        operate-forward
                        (closure-581-perturbation-of the-closure)
                        (closure-581-reverse? the-closure)
                        (closure-581-thing1 the-closure))
      (make-closure-168 (closure-581-new-tape-cell the-closure)
                        (closure-581-reverse-primal the-closure)
                        (closure-581-reverse? the-closure)
                        (closure-581-self the-closure)
                        (closure-581-thing1 the-closure)))))
 (define (operation-603 the-closure the-formals)
   (argument-types closure-149
                   (cons real (cons closure-604 closure-549))
                   real)
   (let ((thing (car the-formals)) (win (car (cdr the-formals)))
                                   (lose (cdr (cdr the-formals))))
     (operation-599 (make-closure-600 lose) ())))
 (define (operation-414 the-closure the-formals)
   (argument-types closure-268 real real)
   (let ((thing the-formals))
     (operation-603
      (closure-268-bundle? the-closure)
      (cons
       thing
       (cons
        (make-closure-604 (closure-268-primal* the-closure))
        (make-closure-549 (closure-268-primal* the-closure)
                          (closure-268-tape-cell? the-closure)
                          thing))))))
 (define (operation-107 the-closure the-formals)
   (argument-types
    closure-106
    (cons
     closure-105
     (cons closure-104 (cons closure-103 (cons closure-102 closure-101))))
    closure-10)
   (let ((recursive-variants the-formals))
     (operation-2
      (make-closure-3 recursive-variants (closure-106-z*-k the-closure))
      (closure-106-kernels the-closure))))
 (define (operation-111 the-closure the-formals)
   (argument-types
    closure-110
    (cons
     closure-105
     (cons closure-104 (cons closure-103 (cons closure-102 closure-101))))
    closure-16)
   (let ((recursive-variants the-formals))
     (operation-13
      (make-closure-14 recursive-variants (closure-110-z*-k the-closure))
      (closure-110-kernels the-closure))))
 (define (operation-560 the-closure the-formals)
   (argument-types
    (vector)
    (cons
     closure-254
     (cons closure-12
           (cons (vector) (cons closure-11 (cons (vector) (vector))))))
    real)
   (let ((z*-k (car the-formals)) (kernels (cdr the-formals)))
     (operation-595
      (make-closure-596 kernels z*-k)
      (cons
       (make-closure-105 kernels)
       (cons
        (make-closure-104 kernels)
        (cons
         (make-closure-103 kernels)
         (cons (make-closure-102 kernels) (make-closure-101 kernels))))))))
 (define (operation-428 the-closure the-formals)
   (argument-types closure-427 () real)
   (let ()
     (operation-346
      (make-closure-347 (closure-427-f the-closure)
                        (closure-427-forward? the-closure)
                        (closure-427-operate-forward the-closure)
                        (closure-427-operate-reverse the-closure)
                        (closure-427-reverse? the-closure)
                        (closure-427-thing2 the-closure))
      (cons
       (operation-34 (closure-427-perturbation-of the-closure) -1)
       (operation-81 (closure-427-perturbation-of the-closure)
                     (closure-427-thing2 the-closure))))))
 (define (operation-556 the-closure the-formals)
   (argument-types closure-555 closure-554 real)
   (let ((operate-reverse the-formals))
     (operation-158
      (make-closure-159 (closure-555-f the-closure)
                        (closure-555-forward? the-closure)
                        (closure-555-operate-forward the-closure)
                        operate-reverse
                        (closure-555-perturbation-of the-closure)
                        (closure-555-reverse? the-closure)
                        (closure-555-thing1 the-closure))
      ())))
 (define (operation-520 the-closure the-formals)
   (argument-types closure-519 closure-404 bool)
   (let ((sum the-formals))
     (operation-539
      (make-closure-540 (closure-519-bundle? the-closure)
                        (closure-519-g:* the-closure)
                        (closure-519-g:+ the-closure)
                        (closure-519-lift-real*real->real the-closure)
                        (closure-519-make-bundle the-closure)
                        (closure-519-new-tape-cell the-closure)
                        sum
                        (closure-519-tape-cell? the-closure))
      (make-closure-98 (closure-519-g:* the-closure)
                       (closure-519-g:+ the-closure)))))
 (define (operation-8 the-closure the-formals)
   (argument-types
    closure-12
    (cons
     closure-105
     (cons closure-104 (cons closure-103 (cons closure-102 closure-101))))
    closure-211)
   (let ((v:+ (car the-formals))
         (v:* (car (cdr the-formals)))
         (lift-real*real->real (car (cdr (cdr the-formals))))
         (g:+ (car (cdr (cdr (cdr the-formals)))))
         (g:* (cdr (cdr (cdr (cdr the-formals))))))
     (make-closure-211 g:+ (closure-12-universal-zero? the-closure))))
 (define (operation-163 the-closure the-formals)
   (argument-types closure-162 () real)
   (let ()
     (operation-348
      (make-closure-349 (closure-162-eps1 the-closure)
                        (closure-162-eps2 the-closure)
                        (closure-162-f the-closure)
                        (closure-162-forward? the-closure)
                        (closure-162-operate-forward the-closure)
                        (closure-162-operate-reverse the-closure)
                        (closure-162-reverse? the-closure)
                        (closure-162-thing1 the-closure)
                        (closure-162-thing2 the-closure))
      ())))
 (define (operation-276 the-closure the-formals)
   (argument-types closure-275 closure-42 real)
   (let ((reverse-primal the-formals))
     (operation-569
      (make-closure-570 (closure-275-f the-closure)
                        (closure-275-forward? the-closure)
                        (closure-275-new-tape-cell the-closure)
                        (closure-275-perturbation-of the-closure)
                        reverse-primal
                        (closure-275-reverse? the-closure)
                        (closure-275-self the-closure)
                        (closure-275-thing1 the-closure)
                        (closure-275-thing2 the-closure))
      (make-closure-571 (closure-275-g:* the-closure)
                        (closure-275-g:+ the-closure)
                        (closure-275-make-bundle the-closure)
                        (closure-275-primal the-closure)
                        (closure-275-self the-closure)
                        (closure-275-tangent the-closure)
                        (closure-275-thing1 the-closure)
                        (closure-275-thing2 the-closure)))))
 (define (operation-586 the-closure the-formals)
   (argument-types closure-585 () real)
   (let ()
     (operation-253 (closure-585-f the-closure)
                    (cons -1 (closure-585-thing2 the-closure)))))
 (define (operation-1 the-closure the-formals)
   (argument-types (vector) () bool)
   (let ()
     (operation-568 (vector) (vector))))
 (operation-1 (vector) ()))
