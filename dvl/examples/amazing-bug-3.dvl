;;; ----------------------------------------------------------------------
;;; Copyright 2010-2011 National University of Ireland.
;;; ----------------------------------------------------------------------
;;; This file is part of DysVunctional Language.
;;; 
;;; DysVunctional Language is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU Affero General Public License as
;;; published by the Free Software Foundation, either version 3 of the
;;;  License, or (at your option) any later version.
;;; 
;;; DysVunctional Language is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;; 
;;; You should have received a copy of the GNU Affero General Public License
;;; along with DysVunctional Language.  If not, see <http://www.gnu.org/licenses/>.
;;; ----------------------------------------------------------------------

;;; Here we have the same program as in amazing-bug-2.dvl, but using a
;;; Church-encoded pair rather than a normal one.  Should the answer
;;; be the same?

(define (f x)
  (lambda (recipient)
    (recipient
     (lambda (y) (sin (* x y)))
     (lambda (g)
       (lambda (z)
         (g (+ x z)))))))

(((derivative f) 3)
 (lambda (g-hat f-hat)
   ((f-hat g-hat) 3.14159)))

===> 8.32914929893078

; ((lambda (y) (* (cos (* 3 y)) (+ 3 y))) (+ 3 3.14159))

;;; Arguably not.  Consider that under the normal definition of
;;; addition on functions and pairs, Church-encoded pairs add
;;; differently from normal ones:
;;; (lambda (cont) (cont x1 y1)) + (lambda (cont) (cont x2 y2)) =
;;; (lambda (cont) (+ (cont x1 y1) (cont x2 y2))) !=
;;; (lambda (cont) (cont (+ x1 x2) (+ y1 y2)))

;;; These are only different if the CONT procedure is non-linear.  The
;;; interpretation is that in the Church-encoded case, the encoding
;;; respects the non-linearity in the CONT procedure, whereas in the
;;; pair case, adding pairs does not respect the non-linearity of the
;;; result.  (In fact, the same is true of ordinary addition of
;;; numbers).  Since differentiation is supposed to expose linear
;;; structure, it makes sense that it would expose different things in
;;; these two cases.
