;;; ----------------------------------------------------------------------
;;; Copyright 2010-2011 National University of Ireland.
;;; ----------------------------------------------------------------------
;;; This file is part of DysVunctional Language.
;;; 
;;; DysVunctional Language is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU Affero General Public License as
;;; published by the Free Software Foundation, either version 3 of the
;;;  License, or (at your option) any later version.
;;; 
;;; DysVunctional Language is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;; 
;;; You should have received a copy of the GNU Affero General Public License
;;; along with DysVunctional Language.  If not, see <http://www.gnu.org/licenses/>.
;;; ----------------------------------------------------------------------

;;; Identity function
((derivative (lambda (x) x)) 7) ===> 1

;;; Constant function
((derivative (lambda (x) 3)) 7) ===> 0

;;; Transform of +
((derivative (lambda (x) (+ x 1))) 7) ===> 1
((derivative (lambda (x) (+ x x))) 7) ===> 2

;;; Nested constant function (don't conflate the perturbations)
(let ()
  (define (one x)
    ((derivative (lambda (y) (+ x y))) 3))
  ((derivative one) 7)) ===> 0

;;; Another don't conflate the perturbations
(let ()
  (define (one x)
    ((derivative (lambda (y) (+ x y))) 3))
  ((derivative (lambda (x)
                 (* x (one x))))
   7)) ===> 1

;;; Don't confuse the perturbations
;; I'm not sure this would catch a thing that swapped the
;; perturbations with each other, but it at least might.
(let ()
  (define (one x)
    ((derivative (lambda (y) (+ x y))) 3))
  ((derivative (lambda (x)
                 (* x (one (* 2 x)))))
   7)) ===> 1

;;; Another don't confuse the perturbations.
((derivative
  (lambda (y)
    ((derivative
      (lambda (x)
        (* x (* x y))))
     (* y 3))))
 5) ===> 60
