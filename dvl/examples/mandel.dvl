(define (car (cons x y)) x)
(define (cdr (cons x y)) y)

(define (c:+ z1 z2)
  (cons (+ (car z1) (car z2))
        (+ (cdr z1) (cdr z2))))

(define (c:* z1 z2)
  (cons (- (* (car z1) (car z2))
           (* (cdr z1) (cdr z2)))
        (+ (* (car z1) (cdr z2))
           (* (cdr z1) (car z2)))))

(define c:0 (cons (real 0) (real 0)))

(define (magnitude z)
  (sqrt (+ (* (car z) (car z))
           (* (cdr z) (cdr z)))))

(define (iterate count f x)
  (if (<= count 0)
      x
      (iterate (- count 1) f (f x))))

(define ((step c) z)
  (c:+ (c:* z z) c))

(define (mandelbrot? c)
  (< (magnitude (iterate (real 100) (step c) c:0)) 2))

(mandelbrot? (cons (real 0.5) (real 0.7)))
