;;; ----------------------------------------------------------------------
;;; Copyright 2010-2011 National University of Ireland.
;;; ----------------------------------------------------------------------
;;; This file is part of DysVunctional Language.
;;; 
;;; DysVunctional Language is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU Affero General Public License as
;;; published by the Free Software Foundation, either version 3 of the
;;;  License, or (at your option) any later version.
;;; 
;;; DysVunctional Language is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;; 
;;; You should have received a copy of the GNU Affero General Public License
;;; along with DysVunctional Language.  If not, see <http://www.gnu.org/licenses/>.
;;; ----------------------------------------------------------------------

(define (((naive-euler state-deriv) step) state)
  (+ state (* step (state-deriv state))))

(define (((manual-rk4 state-deriv) step) state)
  (let* ((k1 (* step (state-deriv state)))
         (k2 (* step (state-deriv (+ state (* 1/2 k1)))))
         (k3 (* step (state-deriv (+ state (* 1/2 k2)))))
         (k4 (* step (state-deriv (+ state k3)))))
    (+ state (* 1/6 (+ k1 (+ (* 2 k2) (+ (* 2 k3) k4)))))))

;; A tableau is a matrix of coefficients for the various steps
(define ((((rk-by-tableau tableau) state-deriv) step) state)
  (let loop ((state-deltas '())
             (derivatives '())
             (coeff-lists (map reverse tableau)))
    (if (null? coeff-lists)
        ;; TODO Should check for null state-deltas (which would have
        ;; meant a null tableau) but need an error system for that.
        (+ state (car state-deltas))
        (let* ((new-state-delta
                (sum (map2 * (car coeff-lists) derivatives)))
               (new-derivative
                (* step (state-deriv (+ state new-state-delta)))))
          (loop (cons new-state-delta state-deltas)
                (cons new-derivative derivatives)
                (cdr coeff-lists))))))


;; Things I wish the system would (effectively) deduce by itself
;; 1) naive-euler is 
;;    0 |
;;      | 1
;;    heun's method, RK4, midpoint method, etc.
;; 2) RK4 reduces to the simpson rule for quadrature when f(t,y)
;;    doesn't depend on y.

(define naive-euler-again
  (rk-by-tableau
   '(()
     (1))))

(define rk4-again
  (rk-by-tableau
   '(()
     (1/2)
     (0   1/2)
     (0   0   1)
     (1/6 1/3 1/3 1/6))))

(define (step-stream method state-deriv init-state)
  (let loop ((state init-state))
    (cons state
          (lambda (step)
            (loop (((method state-deriv) step) state))))))

(define (downsampled-stream stream count)
  (let loop ((stream stream))
    (let ((state (car stream))
          (next (cdr stream)))
      (cons state
            (lambda (arg)
              (let countdown ((count count)
                              (stream stream))
                (if (<= count 0)
                    (loop stream)
                    (countdown (- count 1)
                               ((cdr stream) arg)))))))))
