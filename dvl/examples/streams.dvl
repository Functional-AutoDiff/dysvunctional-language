;;; ----------------------------------------------------------------------
;;; Copyright 2010-2011 National University of Ireland.
;;; ----------------------------------------------------------------------
;;; This file is part of DysVunctional Language.
;;; 
;;; DysVunctional Language is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU Affero General Public License as
;;; published by the Free Software Foundation, either version 3 of the
;;;  License, or (at your option) any later version.
;;; 
;;; DysVunctional Language is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;; 
;;; You should have received a copy of the GNU Affero General Public License
;;; along with DysVunctional Language.  If not, see <http://www.gnu.org/licenses/>.
;;; ----------------------------------------------------------------------

;; A poor man's stream library

(define (promise thunk)
  thunk)

(define (force promise)
  (promise))

(define (head stream)
  (car (force stream)))

(define (tail stream)
  (cdr (force stream)))

(define ((iterate f) state)
  (promise
   (lambda ()
     (cons state ((iterate f) (f state))))))

(define ((drop n) stream)
  (if (<= n 0)
      stream
      ((drop (- n 1))
       (cdr (force stream)))))

(define (nth-stream stream k)
  (let (((cons first rest) (force stream)))
    (if (<= k 0)
        first
        (nth-stream rest (- k 1)))))

(define (stream-map f stream)
  (promise
   (lambda ()
     (let (((cons x xs) (force stream)))
       (cons (f x) ((stream-map f) xs))))))

(define (stream-map2 f s1 s2)
  (promise
   (lambda ()
     (let (((cons s1-first s1-rest) (force s1))
           ((cons s2-first s2-rest) (force s2)))
       (cons (f s1-first s2-first)
             (stream-map2 f s1-rest s2-rest))))))

(define (stream-of-adjacent-pairs stream)
  ;; This is not implemented as the semantically equivalent
  ;; (stream-map2 cons stream (cdr stream)) because since these
  ;; streams are not memoized, that version would duplicate
  ;; computation.
  (let (((cons first rest) (force stream)))
    (let loop ((first first) (rest rest))
      (promise
       (lambda ()
         (let (((cons second rest) (force rest)))
           (cons (cons first second)
                 (loop second rest))))))))
