;;; General stuff

(define (not x) (if x #f #t))

(define (abs x) (if (negative? x) (- 0 x) x))

(define (sqr x) (* x x))

(define (identity x) x)

(define (max x y) (if (>= x y) x y))

;;; Lists

(define (car (cons x y)) x)

(define (cdr (cons x y)) y)

(define (first x) (car x))

(define (second x) (car (cdr x)))

(define (third x) (car (cdr (cdr x))))

(define (fourth x) (car (cdr (cdr (cdr x)))))

(define (rest x) (cdr x))

(define (append x y) (if (null? x) y (cons (first x) (append (rest x) y))))

(define (length l) (if (null? l) 0 (+ (length (rest l)) 1)))

(define (list-ref l i) (if (zero? i) (first l) (list-ref (rest l) (- i 1))))

;;; Mapping and reduction

(define (map f l) (if (null? l) '() (cons (f (first l)) (map f (rest l)))))

;;; needs work: To merge with map.
(define (map2 f l1 l2)
 (if (null? l1)
     '()
     (cons (f (first l1) (first l2)) (map2 f (rest l1) (rest l2)))))

(define (map-n f n)
 (letrec ((loop (lambda (i) (if (= i n) '() (cons (f i) (loop (+ i 1)))))))
  (loop 0)))

(define ((reduce f i) l)
 (if (null? l) i (f (first l) ((reduce f i) (rest l)))))

(define (map-reduce g i f l)
 (if (null? l) i (g (f (first l)) (map-reduce g i f (rest l)))))

(define (remove-if-not p l)
 (cond ((null? l) '())
       ((p (first l)) (cons (first l) (remove-if-not p (rest l))))
       (else (remove-if-not p (rest l)))))

(define (equal? x y)
 ;; This doesn't compare procedures or transformed values.
 (or
  (and (null? x) (null? y))
  (and (boolean? x) (boolean? y) (or (and x y) (and (not x) (not y))))
  (and (real? x) (real? y) (= x y))
  (and (pair? x) (pair? y) (equal? (car x) (car y)) (equal? (cdr x) (cdr y)))))

;;; Vectors

(define (dot u v) ((reduce + 0) (map2 * u v)))

(define (v+ u v) (map2 + u v))

(define (v- u v) (map2 - u v))

(define (k*v k v) (map (lambda (x) (* k x)) v))

(define (magnitude-squared v) (dot v v))

(define (magnitude v) (sqrt (magnitude-squared v)))

;;; An n-dimensional vector with x in position i and zeros elsewhere.
(define (ex x i n)
 (if (zero? n) '() (cons (if (zero? i) x (real 0)) (ex x (- i 1) (- n 1)))))

;;; The ith n-dimensional basis vector.
(define (e i n) (ex (real 1) i n))

;;; Derivatives

(define (j* x) (bundle x (perturb (zero x))))

(define (derivative-F f)
 (let ((f-forward (j* f)))
  (lambda (x)
    (unperturb (tangent (f-forward (bundle x (perturb (real 1)))))))))

(define (gradient-F f)
 (let ((f-forward (j* f)))
  (lambda (x)
   (let ((n (length x)))
    (map-n (lambda (i)
	    (unperturb (tangent (f-forward (bundle x (perturb (e i n)))))))
	   n)))))

(define (gradient-R f)
 (let ((f-reverse (*j f)))
  (lambda (x)
    (cdr (unsensitize ((cdr (f-reverse (*j x))) (sensitize (real 1))))))))

(define (derivative-R f) (gradient-R f))

;; Backwards compatibility names

(define (derivative-using-j* f) (derivative-F f))

(define (derivative-using-*j f) (gradient-using-*j f))

(define (gradient-using-j* f) (gradient-F f))

(define (gradient-using-*j f) (gradient-R f))

;; "Sensible" defaults

(define (derivative f) (derivative-using-*j f))

(define (gradient f) (gradient-using-*j f))

;;; Roots and Optimization

(define (newton-method derivative)
  (letrec ((loop
	    (lambda (f x epsilon)
	      (let ((x-prime (- x (/ (f x) ((derivative f) x)))))
		(if (<= (abs (- x x-prime)) epsilon) x (loop f x-prime epsilon))))))
    loop))

(define (root-F args) ((newton-method derivative-F) args))

(define (root-R args) ((newton-method derivative-R) args))

(define (root args) ((newton-method derivative) args))

;;; needs work: To rule out maxima and inflection points.
(define (argmin-F f x epsilon) (root-F (derivative-F f) x epsilon))
(define (argmin-R f x epsilon) (root-R (derivative-R f) x epsilon))
(define (argmin   f x epsilon) (root   (derivative   f) x epsilon))

;;; needs work: To rule out minima and inflection points.
(define (argmax-F f x epsilon) (root-F (derivative-F f) x epsilon))
(define (argmax-R f x epsilon) (root-R (derivative-R f) x epsilon))
(define (argmax   f x epsilon) (root   (derivative   f) x epsilon))

(define ((invert-F f) y) (root-F (lambda (x) (abs (- (f x) y))) 1 1e-5))
(define ((invert-R f) y) (root-R (lambda (x) (abs (- (f x) y))) 1 1e-5))
(define ((invert   f) y) (root   (lambda (x) (abs (- (f x) y))) 1 1e-5))

(define (iterated-line-search select-direction line-step)
  (lambda (f x epsilon)
    (let ((select-direction (select-direction f)))
      (letrec ((loop
		(lambda (x)
		  (let ((direction (select-direction x)))
		    (if (<= (magnitude direction) epsilon)
			x
			(let* ((line (lambda (k) (v+ x (k*v k direction))))
			       (line-f (lambda (k) (f (line k)))))
			  (loop
			   (line (line-step line-f 0 epsilon)))))))))
	(loop x)))))

(define (gradient-descent-FF args)
  ((iterated-line-search gradient-F argmin-F) args))

(define (gradient-descent-FR args)
  ((iterated-line-search gradient-F argmin-R) args))

(define (gradient-descent-RF args)
  ((iterated-line-search gradient-R argmin-F) args))

(define (gradient-descent-RR args)
  ((iterated-line-search gradient-R argmin-R) args))

(define (gradient-descent args)
  ((iterated-line-search gradient argmin) args))

(define (follow-direction select-direction)
  (lambda (f x0 n eta)
    (let ((select-direction (select-direction f)))
      (letrec ((loop
		(lambda (x0 n)
		  (let ((direction (select-direction x0)))
		    (if (zero? n)
			(list x0 (f x0) direction)
			(loop
			 (v+ x0 (k*v eta direction))
			 (- n 1)))))))
	(loop x0 n)))))

(define (gradient-ascent-F args) ((follow-direction gradient-F) args))
(define (gradient-ascent-R args) ((follow-direction gradient-R) args))
(define (gradient-ascent   args) ((follow-direction gradient  ) args))

;;; Matrices

(define (matrix-rows a) (length a))

(define (matrix-columns a) (length (list-ref a 0)))

(define (matrix-ref a i j) (list-ref (list-ref a i) j))

(define (matrix-row-ref a i) (list-ref a i))

(define (matrix-column-ref a j) (map (lambda (v) (list-ref v j)) a))

(define (vector->row-matrix v) (list v))

(define (vector->column-matrix v) (map (lambda (x) (list x)) v))

(define (m+ a b) (map2 v+ a b))

(define (m- a b) (map2 v- a b))

(define (m*v a v) (map (lambda (u) (dot u v)) a))

(define (transpose a)
 (map-n (lambda (j) (matrix-column-ref a j)) (matrix-columns a)))

(define (outer-product f u v)
 (map (lambda (ui) (map (lambda (vj) (f ui vj)) v)) u))

(define (self-outer-product f v) (outer-product f v v))

(define (m* a b) (outer-product dot a (transpose b)))

(define (v*m v a) (m* (vector->row-matrix v) a))

(define (k*m k m) (map (lambda (row) (map (lambda (e) (* k e)) row)) m))

(define (identity-matrix n) (map-n (lambda (i) (e i n)) n))
