(define (lift-real->real f df/dx)
  (define (self thing)
    (bundle?
     thing
     (lambda (eps prim tang)
       (make-bundle
        eps
        (self prim)
        (g:* (df/dx prim) tang)))
     (lambda ()
       (tape-cell?
        thing
        (lambda (eps id prim partials)
          (new-tape-cell
           eps
           (self prim)
           (list (cons thing (df/dx prim)))))
        (lambda () (f thing))))))
  self)

(define (lift-real*real->real f df/dx1 df/dx2)
  (define (self thing1 thing2)
    (define (reverse-primal epsilon thing)
      ;; This assumes that epsilon is greater than or equal to the
      ;; perturbation of thing, and is an epsilon associated with
      ;; reverse mode.
      (if (and (reverse? thing)
               (gensym= epsilon (tape-cell-epsilon thing)))
          (tape-cell-primal thing)
          thing))
    (define (operate-forward eps)
      (let ((prim1 (primal eps thing1))
            (prim2 (primal eps thing2))
            (tang1 (tangent eps thing1))
            (tang2 (tangent eps thing2)))
        (make-bundle
         eps
         (self prim1 prim2)
         (g:+ (g:* (df/dx1 prim1 prim2) tang1)
              (g:* (df/dx2 prim1 prim2) tang2)))))
    (define (operate-reverse eps)
      (let ((prim1 (reverse-primal eps thing1))
            (prim2 (reverse-primal eps thing2)))
        (let ((partial1
               (if (and (reverse? thing1)
                        (gensym= eps (tape-cell-epsilon thing1)))
                   (list
                    (cons thing1 (df/dx1 prim1 prim2)))
                   '()))
              (partial2
               (if (and (reverse? thing2)
                        (gensym= eps (tape-cell-epsilon thing2)))
                   (list
                    (cons thing2 (df/dx2 prim1 prim2)))
                   '())))
          (new-tape-cell
           eps
           (self prim1 prim2)
           (append partial1 partial2)))))
    (let ((eps1 (perturbation-of thing1))
          (eps2 (perturbation-of thing2)))
      (cond ((and (forward? thing1) (not (gensym< eps1 eps2)))
             (operate-forward eps1))
            ((and (reverse? thing1) (not (gensym< eps1 eps2)))
             (operate-reverse eps1))
            ((and (forward? thing2) (gensym< eps1 eps2))
             (operate-forward eps2))
            ((and (reverse? thing2) (gensym< eps1 eps2))
             (operate-reverse eps2))
            (else (f thing1 thing2)))))
  self)

(define (lift-real->boolean f)
  (lambda (thing)
    (f (primal* thing))))

(define (lift-real*real->boolean f)
  (lambda (thing1 thing2)
    (f (primal* thing1) (primal* thing2))))

(define (g:+ args) ((lift-real*real->real v:+ (lambda (x1 x2) 1) (lambda (x1 x2) 1)) args))
(define (g:- args) ((lift-real*real->real v:- (lambda (x1 x2) 1) (lambda (x1 x2) -1)) args))
(define (g:* args) ((lift-real*real->real v:* (lambda (x1 x2) x2) (lambda (x1 x2) x1)) args))
(define (g:/ args)
  ((lift-real*real->real
    v:/ (lambda (x1 x2) (g:/ 1 x2)) (lambda (x1 x2) (g:- 0 (g:/ x1 (g:* x2 x2))))) args))
(define (g:sqrt args) ((lift-real->real sqrt (lambda (x) (g:/ 1 (g:* 2 (g:sqrt x))))) args))
(define (g:exp args) ((lift-real->real exp (lambda (x) (g:exp x))) args))
(define (g:log args) ((lift-real->real log (lambda (x) (g:/ 1 x))) args))
(define (g:sin args) ((lift-real->real sin (lambda (x) (g:cos x))) args))
(define (g:cos args) ((lift-real->real cos (lambda (x) (g:- 0 (g:sin x)))) args))
(define (g:atan args) ((lift-real*real->real
                        atan
                        (lambda (x1 x2) (g:/ (g:- 0 x2) (g:+ (g:* x1 x1) (g:* x2 x2))))
                        (lambda (x1 x2) (g:/ x1 (g:+ (g:* x1 x1) (g:* x2 x2))))) args))
(define (g:= args) ((lift-real*real->boolean =) args))
(define (g:< args) ((lift-real*real->boolean <) args))
(define (g:> args) ((lift-real*real->boolean >) args))
(define (g:<= args) ((lift-real*real->boolean <=) args))
(define (g:>= args) ((lift-real*real->boolean >=) args))
(define (g:zero? args) ((lift-real->boolean zero?) args))
(define (g:positive? args) ((lift-real->boolean positive?) args))
(define (g:negative? args) ((lift-real->boolean negative?) args))
(define (g:real? args) ((lift-real->boolean real?) args))
