;;; ----------------------------------------------------------------------
;;; Copyright 2010-2011 National University of Ireland.
;;; ----------------------------------------------------------------------
;;; This file is part of DysVunctional Language.
;;; 
;;; DysVunctional Language is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU Affero General Public License as
;;; published by the Free Software Foundation, either version 3 of the
;;;  License, or (at your option) any later version.
;;; 
;;; DysVunctional Language is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;; 
;;; You should have received a copy of the GNU Affero General Public License
;;; along with DysVunctional Language.  If not, see <http://www.gnu.org/licenses/>.
;;; ----------------------------------------------------------------------

(define (derivative-f f)
  (derivative f))

(define (derivative-using-j* f)
  (derivative f))

(define (derivative-r f)
  (gradient-r f))

(define (derivative-using-*j f)
  (gradient-r f))

(define (v+ u v) (map2 g:+ u v))

(define (v- u v) (map2 g:- u v))

(define (jacobian-using-j* f)
  (gradient-f f))

(define (j-transpose*v f)
  (lambda (x y-grave)
    ((gradient-r (lambda (x) (dot (f x) y-grave)))
     x)))

(define (perturb thing) thing)

(define (unperturb thing) thing)

(define (sensitize thing) thing)

(define (unsensitize thing) thing)

;;; DVL does not lift constants to zero-tangent bundles, expecting the
;;; arithmetic operations to deal with any asymmetries.  Sadly, if one
;;; branch of an IF wants to return a constant and the other a bundle,
;;; DVL has a problem.  If DVL supported union types, this would just
;;; become a union -- inefficient perhaps, but not deadly.  If DVL
;;; supported a mechanism to define automatic coersions of one type to
;;; another, that IF could be taught to apply, the union in question
;;; could even be eliminated.  As it stands, however, the only way to
;;; compile examples that experience this phenomenon is by manually
;;; inserting a hack like this.
(define (HACK-raise-to-same-bundle-level thing target)
  (g:+ (g:- thing target) target))
