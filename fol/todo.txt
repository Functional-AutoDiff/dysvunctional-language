- Do I want to make all the analysis stages treat the entry point
  as yet another definition?
- Do I want to define a general destructurer of definitions, instead
  of all these rules?

NB: SRA can remove call graph edges by eliminating contentless
  expressions that contain calls to procedures.  However, all
  procedures are contentful, because otherwise the code generator
  would not have emitted them.  Does the code generator emit
  expressions that request some content and then throw it away?  In
  any case, there are FOL programs where SRA exposes work for
  inlining; should I explain this?  Should I explain that VL and DVL
  do not emit such programs?

NB: The reason that some of my recursions are broken into expression
  loops and a toplevel crunch is that the top level is the only
  place that introduces bindings with letrec scope.

NB: INTERPROCEDURAL-DEAD-CODE-ELIMINATION is solving the following
  liveness equations: TODO

----------------------------------------------------------------------

Interprocedural must-alias analysis?
- Can this collapse identical perturbations and recover tower mode on
  (D (D (lambda (x) ...)))?
- Can this collapse primals and recover stack tangent mode?


Sussman's example of where differentiating functions that output
functions is useful:

(define (((delta eta) f) q)
  (let ((g (lambda (eps) (f (+ q (* eps eta))))))
    ((D g) 0)))

; Nonsense useage example:
((((delta cos) D) square) 3)

A good testing strategy is to differentiate (lambda (x) (/ (f x) (f
x))) for some suitably horrible f many times.

Generate syntax checkers from the grammars?  Generate random example
programs from the grammars?

Software-validate the following assertions:
- all optimizer stages preserve uniqueness of names
- all optimizer stages preserve the semantics of any valid FOL program
  (with alpha renaming inserted where needed)
  - what is the exact list of criteria for "valid"?
    - can I effectively check those with the type checker?
      - can I efficiently generate random valid programs?
- de-aliasing, dead code elimination, and tidying are idempotent
- de-aliasing does not generate work for inlining and SRA
- dead variable elimination does not generate work for SRA or de-aliasing

(begin
 (define (foo x y)
   (argument-types real real real)
   (+ x y))
 (let ((foo 3))
   (foo 1 2)))
breaks horribly on inlining (global vs local name clash)
