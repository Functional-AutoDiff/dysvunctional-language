(define (append x y)
  (if (null? x)
      y
      (cons (car x) (append (cdr x) y))))

(define (tree-map f tree)
  (if (pair? tree)
      (cons (tree-map f (car tree))
            (tree-map f (cdr tree)))
      (f tree)))

(define (pairwise f lst)
  (cond ((null? lst)
         '())
        ((null? (cdr lst))
         '())
        (else
         (append (map (lambda (second)
                        (f (car lst) second))
                      (cdr lst))
                 (pairwise f (cdr lst))))))

(define (dot u v) ((reduce + 0) (map2 * u v)))

(define (magnitude-squared v) (dot v v))

(define (magnitude v) (sqrt (magnitude-squared v)))

(define (distance pos1 pos2)
  (magnitude (- pos2 pos1)))


(define (make-body mass position velocity)
  (tree-map real (make-object mass position velocity)))

(define make-object list)
(define mass car)
(define position cadr)
(define velocity caddr)

(define (update-position (list mass position velocity) new-position)
  (make-object mass new-position velocity))

;; Heliocentric invariable-plane rectangular coordinates 1950.0
;; Cohen, Hubbard, and Oesterwinter.
;; Positions are in AU, velocities are in AU/day, masses are in Msun.

(define sun
  (make-body
   (+ 1 0.597682e-5)
   (list 0 0 0)
   (list 0 0 0)))

(define jupiter
  (make-body
   (/ 1 1047.355)
   (list 3.4095304279450 3.6358700383230 0.0342402877997)
   (list -0.56046701820130e-2 0.55244932195970e-2 -0.00026639819072e-2)))

(define saturn
  (make-body
   (/ 1 3501.6)
   (list 6.6120798297050 6.3869348834150 -.1361443021015)
   (list -4.1802306919770e-3 4.0035767422770e-3 1.67237640786e-5)))

(define uranus
  (make-body
   (/ 1 22869.)
   (list 11.167697426230 16.043436043290 .361784940993)
   (list -3.2655385504170e-3 2.0707233538550e-3 -2.17667721966e-5)))

(define neptune
  (make-body
   (/ 1 19314.)
   (list -30.173660054850 1.917641287545 -.153885933998)
   (list -2.241622739519e-4 -3.1072718854630e-3 3.58376025706e-5)))
#;
(define pluto
  (make-body
   0                                    ; (/ 1 360000.)
   (list -21.381833467487 32.077998611553 2.492458557184)
   (list -0.17760562614312e-2 -0.20608701590214e-2 0.06580950635153e-2)))


(define G-si (real 6.67300e-11)) ; m^3 / kg s^2

(define (potential2 obj1 obj2)
  (/ (* -1 G (mass obj1) (mass obj2))
     (distance (position obj1) (position obj2))))

(define (potential objects)
  (sum (pairwise potential2 objects)))

(define ((positions->potential objects) positions)
  (potential (map2 update-position objects positions)))

(define (forces objects)
  (gradient (positions->potential objects) positions))

(define (state-derivative state)
  (make-state (velocities state)
    (map / (forces (positions state)) masses))

(define (state-derivative time objects)
  (cons
   1
   (map3 make-object
         (map (lambda (obj) 0) objects) ; masses do not change
         (map velocity objects) ; the velocities are the derivatives of the positions
         (map2 / (forces objects) (map mass objects))
         )))

(runge-kutta-4
 state-derivative
 (make-state init-positions init-velocities)
 1) ; day

;; TODO G in the right units
;; TODO Actual integrators, rather than just step functions.
