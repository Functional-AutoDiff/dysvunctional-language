A VL interpreter and an aggressively optimizing VL->Scheme compiler.

Author: Alexey Radul


Why do you care?
----------------------------------------------------------------------

The compiler uses polyvariant union-free flow analysis to compile the
higher-order functional language VL to efficient, Fortran-like Scheme
code.  The purpose of this program is to illustrate and explain
polyvariant union-free flow analysis.  The program follows Sections 5
and 6 of [1].  The language VL is the language VLAD from same, but
without the AD.


What is polyvariant union-free flow analysis?
----------------------------------------------------------------------

"Flow analysis" is thinking about what kinds of values may flow where
in a program.  For example, flow analysis will discover things like
"this variable X always holds an integer", or "this variable F is
always the function INCREMENT", or "this call site always calls the
function MAP on the function DOUBLE" or etc.

"Polyvariant" means that the flow analysis is willing to duplicate
pieces of the program (namely, procedure definitions) in order to
improve the precision of the analysis.  For example, if at one call
site, MAP is always called with INCREMENT, and at another, it's always
called with DOUBLE, the analysis is willing to generate two versions
of MAP, in one of which the function being mapped is always INCREMENT
and in the other always DOUBLE, instead of having only one copy of MAP
which may be called upon to map either INCREMENT or DOUBLE on
different occasions.  This allows analysing the bodies of those two
copies of MAP more precisely than would be possible if they were not
split apart.

"Union-free" means that the analysis does not admit union types, and
continues analysing the program until there are no more union types
anywhere.  The only residual uncertainty this analysis admits is "this
place gets some real number but I don't know which" and "this place
gets some boolean but I don't know which".  The shapes of all data
structures, including closures, are determined at analysis time.  The
targets of all function calls are determined at analysis time.  Only
numeric operations and conditional branches remain.  This has the
consequence that the output will have a specialized version of MAP for
every function that is mapped and every length of list that is mapped
over.

Going all the way to union-free is almost certainly overkill.  On the
upside, it allows the compiler to completely unbox everything because
no types of anything ever need to be checked at runtime.  On the
downside, do you really want to unroll a MAP over a 100,000-element
list into a straight-line sequence of 100,000 uses of the mapped
function?  Probably not.  If nothing else, your instruction cache will
cry bloody murder.  Also on the downside, the union-less-ness of the
analysis produces a serious restriction on VL's expressivity: all
legal VL programs must have completely statically determinable type
structure.

Nevertheless, [1] describes a union-free flow analysis, so this code
implements a union-free flow analysis.  It seems reasonable to learn
how to do union-free first, and then figure out how to judiciously add
union types.


What is VL?
----------------------------------------------------------------------

VL stands for Vunctional Language.  It is a higher-order functional
programming language.  It is a reimplementation of VLAD from [1],
without the automatic differentiation basis.  VL resembles Scheme,
differing in the following respects:

- The only Scheme datatypes supported are the empty list,
  booleans, real numbers, pairs, and procedures.
- Only the following built-in Scheme syntax is supported:
  LAMBDA, IF, LET, LETREC, and procedure application.
- Only a subset of built-in Scheme procedures are supported.
- No rest arguments.
- No implicit sequencing (lambda bodies may only contain one form).
- CONS is built-in syntax, not a procedure.
- The names LAMBDA, IF, LET, LETREC, and CONS may not be shadowed.
- The only self-evaluating forms are literal numbers, #t, #f, and ()
- Procedure parameters p can be variables, () to indicate that an
  argument should be ignored, or (cons p1 p2) to indicate the argument
  should be destructured appropriately.
- All procedures take exactly one argument and return exactly one
  result.  Syntactically n-ary procedure applications and formal
  parameter lists are supported by transformation to construction and
  destructuring of compound data structures.

VL supports the following procedures:

null?  -- as in Scheme
pair?  -- as in Scheme
  N.B. cons is syntax, and car and cdr are obviated by destructuring

abs    -- as in Scheme
exp    -- as in Scheme
log    -- as in Scheme
sin    -- as in Scheme
cos    -- as in Scheme
tan    -- as in Scheme
asin   -- as in Scheme
acos   -- as in Scheme
sqrt   -- as in Scheme

+      -- binary only
-      -- binary only
*      -- binary only
/      -- binary only
atan   -- binary only
expt   -- as in Scheme

<      -- binary only
<=     -- binary only
>      -- binary only
>=     -- binary only
=      -- binary only

real   -- introduces imprecision:
  At runtime, REAL is just the identity procedure on real numbers, but
  the flow analysis always treats the return value of REAL as the
  unknown real number, even though it could in principle be determined
  statically.  The resulting code is not specialized on the values of
  any arguments to any instance of REAL, nor, therefore, on the
  results of computations with them.

VL is completely pure --- it supports neither mutation of VL
variables, nor input from nor output to the outside world.  It is a
vehicle for studying flow analyses.  As VL has no i/o facilities,
there is no reason why a "flow analysis" of a VL program couldn't just
run the program and emit code that just spits out the answer.  This
behavior would defeat the purpose (and slow the analyzer down even
more), so, following [1], VL offers the primitive procedure REAL.


So how does it work?
----------------------------------------------------------------------

The VL->Scheme compiler proceeds by stages:

1) The input VL program is syntactically transformed by a process very
   much like macro expansion into a program in a smaller core language
   which consists only of constants, variable references, LAMBDA, IF,
   CONS, and applications.  This is uninteresting but simplifies the
   rest.

2) The simplified program undergoes polyvariant union-free flow
   analysis by abstract evaluation to determine the procedures called
   at all call sites and the shapes of all data structures (including
   closures).

3) The code generator traverses the result of the flow analysis to
   generate Scheme code that consists only of toplevel structure
   definitions, toplevel procedure definitions, and one toplevel entry
   form, and where all variables are monomorphic and all procedure
   calls are to explicitly named procedures.

The output Scheme code is suitable for aggressive inlining and scalar
replacement of aggregates, after which it should compile to machine
code that is similar to that generated by good Fortran compilers.

This distribution also includes a direct interpreter for the subset of
VL produced by Stage 1, and a term-rewriting post-processor that can
be applied to the output Scheme code to make it a little more legible.


I'm psyched!  Where do I start?
----------------------------------------------------------------------

Read [1] first.  Then, if you like to run code, grab your MIT Scheme
repl and try

(load "load")
(set! *analyze-wallp* 10)
(pp
 (compile-to-scheme
  '(let ((increment (lambda (x) (+ x 1)))
	 (double (lambda (x) (* x 2)))
	 (car (lambda ((cons x y)) x))
	 (cdr (lambda ((cons x y)) y)))
     (letrec ((map (lambda (f lst)
		     (if (null? lst)
			 ()
			 (cons (f (car lst)) (map f (cdr lst)))))))
       (cons (map increment (real 1) (real 2) (real 3) ())
	     (map double (real 4) (real 5) ()))))))

There are more example VL programs in examples.scm.  You can paste the
compiled output straight into your repl and it will run.  Try removing
calls to REAL from some of the examples and see what happens to the
compiled output.

If you like to read code, here's a good order:

examples.scm         Example VL programs
abstract-eval.scm    The main interesting guts of the program; Stage 2
code-generator.scm   The other interesting guts of the program; Stage 3
macro.scm            Syntax preprocessor; Stage 1
eval.scm             Direct interpreter (straight from the textbook)
post-processor.scm   Term-rewriting post-processor
primitives.scm       Primitive procedures
data.scm             Completely boring data structures
env.scm              Environments
analysis.scm         Data structure for the full current analysis knowledge
abstract-values.scm  Shapes that values may be known to have
nomenclature.scm     Synthesizing Scheme names for code generation
load.scm             Putting it all together


Bibliography
----------------------------------------------------------------------

[1] Jeffrey Siskind and Barak Pearlmutter, "Using Polyvariant
Union-Free Flow Analysis to Compile a Higher-Order Functional
Programming Language with a First-Class Derivative Operator to
Efficient Fortran-like Code."  Purdue University ECE Technical
Report, 2008.  http://docs.lib.purdue.edu/ecetr/367
Enclosed as vlad-tech-report.pdf
