(declare (usual-integrations))
;;;; Analysis data structure

(define-structure (binding safe-accessors)
  exp
  env
  value)

(define-structure (analysis safe-accessors)
  bindings)

(define (analysis-search exp env analysis win lose)
  (let loop ((bindings (analysis-bindings analysis)))
    (if (null? bindings)
	(lose)
	(if (and (equal? exp (binding-exp (car bindings)))
		 (abstract-equal? env (binding-env (car bindings))))
	    (win (car bindings))
	    (loop (cdr bindings))))))

;;; ANALYSIS-GET is \bar E_1 from [1].
(define (analysis-get exp env analysis)
  (analysis-search exp env analysis binding-value (lambda () abstract-none)))

;;; EXPAND-ANALYSIS is \bar E_1' from [1].
;;; It registers interest in the evaluation of EXP in ENV by producing
;;; a binding to be added to the new incarnation of ANALYSIS, should
;;; the current incarnation lack any binding already covering that
;;; question.
(define (analysis-expand exp env analysis)
  (analysis-search exp env analysis
   (lambda (binding)
     '())
   (lambda ()
     (list (make-binding exp env abstract-none)))))

(define (same-analysis-binding? binding1 binding2)
  (and (equal? (binding-exp binding1) (binding-exp binding2))
       (abstract-equal? (binding-env binding1) (binding-env binding2))
       (abstract-equal? (binding-value binding1) (binding-value binding2))))

(define (same-analysis? ana1 ana2)
  (lset= same-analysis-binding? (analysis-bindings ana1)
	 (analysis-bindings ana2)))

(define (step-changed-analysis? ana1 ana2)
  ;; The definition of this is
  ;; (not (same-analysis? ana1 ana2))
  ;; but since ANA2 is made from ANA1 by STEP-ANALYSIS we know that it
  ;; will contain bindings for all the same exp-env pairs (with
  ;; possibly improved values), in the same order, plus maybe a few
  ;; more bindings generated by EXPAND-ANALYSIS.  Therefore, this does
  ;; the right thing (and is faster).
  (let ((bindings1 (analysis-bindings ana1))
	(bindings2 (analysis-bindings ana2)))
    (or (not (= (length bindings1) (length bindings2)))
	(not (every same-analysis-binding? bindings1 bindings2)))))
