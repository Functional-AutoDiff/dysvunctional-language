;;; ----------------------------------------------------------------------
;;; Copyright 2010-2011 National University of Ireland.
;;; ----------------------------------------------------------------------
;;; This file is part of DysVunctional Language.
;;; 
;;; DysVunctional Language is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU Affero General Public License as
;;; published by the Free Software Foundation, either version 3 of the
;;;  License, or (at your option) any later version.
;;; 
;;; DysVunctional Language is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;; 
;;; You should have received a copy of the GNU Affero General Public License
;;; along with DysVunctional Language.  If not, see <http://www.gnu.org/licenses/>.
;;; ----------------------------------------------------------------------

;;; Variations on IF

(if (< (real 3) (real 6))
    (real 4)
    (real 3)) ===> 4

(if (< 3 6)
    (real 4)
    (real 3)) ===> 4

;;; Variations on destructuring

(let ((my-add (lambda (x y) (+ (real x) (real y)))))
  (my-add 3 6)) ===> 9

(let ((my-add (lambda (foo) (+ foo))))
  (my-add (cons (real 3) (real 6)))) ===> 9

(let ((my-add (lambda (foo) (+ foo))))
  (my-add (cons 3 (real 6)))) ===> 9

(let ((my-add (lambda (foo) (real (+ foo)))))
  (my-add 3 6)) ===> 9

(let ((delay-add (lambda (x y) (lambda () (+ x y)))))
  ((delay-add (real 3) (real 6)))) ===> 9

(let ((frobnicate (lambda (x) (real x))))
  (frobnicate 3)) ===> 3

;;; Recursion with non-primitive procedures

(let ((my-* (lambda (x y) (* x y))))
  (letrec ((fact (lambda (n)
                   (if (= n 1)
                       1
                       (my-* n (fact (- n 1)))))))
    (fact (real 5)))) ===> 120

(let ((my-* (lambda (x y) (* x y))))
  (letrec ((fact (lambda (n)
                   (if (= n 1)
                       1
                       (my-* n (fact (- n 1)))))))
    (fact 5))) ===> 120

;;; Factorial, with letrec manually macro expanded

(let ((Z (lambda (f)
           ((lambda (x)
              (f (lambda (y) ((x x) y))))
            (lambda (x)
              (f (lambda (y) ((x x) y))))))))
  (let ((fact (Z (lambda (fact)
                   (lambda (n)
                     (if (= n 1)
                         1
                         (* n (fact (- n 1)))))))))
    (fact (real 5)))) ===> 120

;;; Mutual recursion with non-primitives

(let ()
  (define (my-- x y)
    (- x y))
  (define (even? n)
    (if (= n 0)
        #t
        (odd? (my-- n 1))))
  (define (odd? n)
    (if (= n 0)
        #f
        (even? (my-- n 1))))
  (even? (real 5))) ===> #f

(let ()
  (define (my-* x y)
    (* x y))
  (define (fact-1 n)
    (if (= n 0)
        1
        (my-* n (fact-2 (- n 1)))))
  (define (fact-2 n)
    (if (= n 0)
        1
        (my-* n (fact-1 (- n 1)))))
  (fact-1 (real 6))) ===> 720


(let ()
  (define (car (cons x y)) x)
  (define (cdr (cons x y)) y)
  (define (map f l)
    (if (null? l)
        '()
        (cons (f (car l)) (map f (cdr l)))))
  (map sqrt (list 1 4 9 16))) ===> (1 2 3 4)

(let ()
  (define (car (cons x y)) x)
  (define (cdr (cons x y)) y)
  (define (map f l)
    (if (null? l)
        '()
        (cons (f (car l)) (map f (cdr l)))))
  (map sqrt (list (real 1) (real 4) (real 9) (real 16)))) ===> (1 2 3 4)
